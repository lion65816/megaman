●Luaスクリプトを利用した編集について
　マップを作っていると、壁のエッジの部分だけパターンが違う、
　と言ったような何らかのパターンになっている物を、毎回手作業で
　16x16タイルを拾い上げて置いておくのが苦痛に感じてくるかもしれません。
　ある程度、機械的に可能な作業は、ざっくりとコンピュータに任せて
　細かい部分を人間が仕上げていくというのが望ましいです。

　そこで、スクリプトを利用してある程度自動的に補正できる機能を提供するのが
　この、Luaスクリプトを利用した編集機能です。

●サンプル
　このフォルダに入っているLuaファイルは私がテキトーに作ったサンプルです。

N_S_*.lua

　という名前になっており、
　Nがナンバリング(1-6)、Sがステージ番号となっています。
　当該のステージを表示した後にLuaファイルをウィンドウにドロップすれば
　機能を使うことが出来ます。
　例えば、カットマンステージを表示した後に、1_0_Wall.luaをドロップすれば、
　Luaスクリプトによる編集機能が利用できる状態になります。

　どのLuaも走らせると短い説明文がでますが、
　どのLuaも今のところは、範囲選択後にフルキーの0をタイプすることで
　機能を利用できるようになっています。

　色々な部分の自動補正に対応していますが、どれも完璧ではなく
　作成した部分を破壊してしまうことが多くあります。
　あくまでこれらの補正は補助であり、概形を作った後は
　手作業での調整が必要となります。

●ゆらゆらろっくが提供するLua関数のマニュアル
　エディタの機能としてLuaスクリプトを読み込ませるようにしてあるということは、
　つまり、自分でスクリプトを作ることも可能だということです。
　Luaに関する説明は一切しませんが、各種関数の説明が必要になります。

　以下は、エディタ上のタイル等にアクセスするための関数です。
　本当に必要なだけの最低限の機能しか提供されていません。
　色々ボロい仕様ですが、使えればいい主義で作られたものです。お察しを。
　Luaの様式に従って（？）ビット演算を除き基本的に全て小文字ですが、
　大文字小文字混ぜたほうが良かった気がする……


AND(a1,...)
OR(a1,...)
EOR(a1,...)
　ビット演算です。説明略。引数は3つ以上も可能です。


print(str)
　コンソールにテキストを出力します。改行は自動では出力されません。


iskeyholded(code)
iskeypressed(code)
iskeyreleased(code)
　キーコードcodeのキーが、「押されているか」「押されたか」「離されたか」を
　返します。
　条件を満たしていればtrue、満たしていないときはnilが帰ります。
　例)if iskeypressed(string.byte("0")) then


getmouse()
　マウスカーソルの指すタイル座標のx,yを2数値返します。
　マップの外を指している場合は、両方に値-1が入ります。
　例)mx,my = getmouse()


getterrain(x,y)
　タイル座標x,yの16x16タイル情報を返します。
　下位ニブルに色番号、上位ニブルに判定番号が入ります。
　ロックマン1/2はゆらゆらろっくの仕様的に、工夫しないとうまく動きません。

gettile(x,y)
　タイル座標x,yの16x16タイル番号を返します。


settile(x,y,v)
　タイル座標x,yの16x16タイルをvに書き換えます。


getselectedrect()
　選択範囲を表す4変数、x0,y0,x1,y1を返します。
　例)x0,y0,x1,y1 = getselectedrect()


updateundo()
　アンドゥバッファを更新します。
　一つの作業が行われたら必ず、そして、
　あまり高頻度にではなく呼ばれるのが好ましいです。
　キー押下時に１回だけ実行される処理であれば実行後に呼び出せば良いのですが、
　押下中にずっと処理し続けるような場合には、離した時に呼ぶのが好ましいです。


pEdit()
fEdit()
pDrawEditor()
fDrawEditor()
pDrawMap()
fDrawMap()
　エディタからフックされる関数です。
　つまり、これらの名前の関数を用意しておけば
　エディタが然るべくタイミングで呼び出してくれます。

　先頭のp,fは、ある処理が行われる前/後にフックされることを示します。
　*Editはエディタが1秒間に60回呼び出すエディタ用の処理です。
　基本的にpEditだけを使えば問題ありません。
　*DrawEditor/*DrawMapで描画する瞬間にフックすることも出来るのですが
　描画用の関数を提供していないので全く意味がありません。

　どの関数も、数値を返します。*Edit以外は何を返しても無意味です。
　*Editにおいて、非0が返されると、エディタは画面の更新を行います。
　逆に0を返されたときは、エディタは画面の更新を行いません。
　面倒であれば常に1でも返しておけば良いのですが、そうすると、
　エディタが60FPSで画面を更新するようになるため少々重くなります。
　気になるのであれば、画面が更新されるべき処理を行ったときだけ非0を返します。

　尚、こういった性質があるため、Luaがクラッシュしたときは
　画面の更新が行われていない状態になっている事があります。
（何らかの動作を行うと、Luaがクラッシュ前に行なっていた変更が表示される）





　最適化と機能拡張等の説明です。
　表題の後ろの()内部のシンボル名が、アセンブルスイッチとなっています。

■■■■最適化(by ぷれさべー)■■■■
●16x16タイルのWRAMへの展開による最適化(SW_WRAMMap)
　最適化効果:大
　副作用　　:大
　追加容量　:大
　競合　　　:SW_UseTableAtTerrainProc

　ステージを、16x16単位でワークRAMに展開することで最適化を行います。
　今回の全ての最適化の中で、最も大きな効果、副作用、追加容量をもたらします。
　副作用があまりにきつく、原作と細かい多くの点で変わってしまうので、
　どうしても嫌なら外すことも考えられると思います。
　が、今回の最適化の肝であるので、外すと大きく最適化効果が下がります。
　また、このスイッチは、他の最適化に必要になる場合も多いです。

　具体的な副作用を列挙すると……
・ステージ突入時とルーム間スクロール時に読み込み処理が挟まる
　さらに、読み込み時間は移動先のルームの広さに依存する。
（目安としては1画面につき1フレームほどかかる。）
　つまり、画面端っこに触った時、ラグる。最適化という目的に反している。
・通常利用されない、最下段の16x16タイルが判定に利用されるようになる
　壁判定にすれば、画面の一番下に立つことが出来るようになる。
　これはこれで便利になったと言えなくない。
・各種、原作での地形が変化する処理が大体書き直されている。
　リングマンステージのワッパー撃破による地形変化、
　ダストマンステージのプレス天井の場所のゴミ破壊、
　リングマンステージの虹色足場、
　ドリルマンステージの出現床、
　コサック１のモスラーヤの床破壊、
　ワイリー３のワイリーマシンへのカプセル出現、
　が該当。
　これらの処理を改造したい場合、このパッチの影響を考慮して行う必要がある。
・「横棒判定」のフォーマットが変化している

　各種仕様の変化は、「src/SW_WRAMMapの処理変更.txt」を御覧ください。

●SW_WRAMMapのための原作対応(SW_WRAMMap)
　最適化ではなく、
　SW_WRAMMapを使うときの、原作のための書き換えです。
　リングマンステージの幾つかの16x16タイルが書き換わります。

●SW_WRAMMapのドリルマンステージ出現床の改造への対応(SW_WRAMMap_DrillLeverEx)
　最適化ではなく、
　SW_WRAMMapを改造で使う時にドリルマンステージの出現床の設定を
　しやすくするためのプログラムです。
　これを1にすると、原作では正しく動かなくなります。

●中爆発１ユニット化による最適化(SW_MidExp)
　最適化効果:大
　副作用　　:大
　追加容量　:中

　中爆発(ドリルボムの爆発など)を
　１つのオブジェクトに変更することで最適化を行います。
　また、事情により、中ボスや後半のボスを倒した時の、「中爆発×ｎ」が、
　原作では２発の所、５発発生するようになっています。
　最適化の効果は大きめで、中爆発発生時の処理が劇的に軽くなりますが、
　当然、中爆発が存在しないときは何も変わりません。
　また、消費されるオブジェクト数が少なくなるという利点もあります。
　ただし、中爆発を利用するオブジェクトの仕様が若干変わってしまいます。
　具体的には、判定が長めに滞留するようになってしまいます。
　また、爆発の見かけも完全に元と同じものではありません。
　ロックマンの使うドリルボムにおいて特に大きな影響が出ており、
　原作では２回ヒットする所が、３回もヒットするようになってしまいます。
　一方で、連射力が原作より劣る形になっています。

　この様に滞在時間が変化したことで、中ボスや後半ボスを倒した時の、
　「中爆発×ｎ」が、原作の２発から３発に増えてしまいました。
　そもそも、この「中爆発×ｎ」は、プログラム上では５発発生する様になっており、
　その処理が途中で止まってしまうため、２発になっていました。
　２発から３発に変化してしまうなら、もういっそのこと、
　プログラム通りに５発発生してはどうか、ということで、
　５発発生するようにプログラムを修正しました。

●判定の省略による最適化(SW_DisableCollision)
　最適化効果:大
　副作用　　:中?
　追加容量　:中

　ロックマン４では、エフェクトなどとも、こちらの武器と判定を行っています。
　その判定を削除することで最適化を行います。
　エフェクト以外にも、こちらの武器と当たり得ないものの判定を
　個別対応で削除しています。
　敵弾も、スカルバリアを装備中以外は
　判定の必要がありませんので判定処理をスキップしています。
　この最適化の範囲はゲーム中の多くのオブジェクトに渡っており、
　あちこちに追加容量を発生させてしまっています。
　また、ひょっとしたらどっかしら対応をミスしている可能性があります。
　副作用というのはそれのことですが、それ以外にも、
　改造するときに、例えば敵弾がこちらの弾を弾くようにする、
　といったことをしたいとき、思い通りにいかなくなるかもしれません。
（改造の幅が狭まる可能性があるという事）
　もしそういったことをしたいなら、
　当該のオブジェクトの最適化だけをはがす手間が必要になります。

●敵と地形の判定の省略による最適化(SW_OmitTerrainCollision)
　最適化効果:中+
　副作用　　:中
　追加容量　:無+
　必要　　　:SW_WRAMMap

　敵と地形の判定の点を間引きすることで処理を軽くします。
　このゲームでは、縦もしくは横に並んだ数点の地形の判定を処理する作りになっています。
　この最適化は、大体真ん中の点を省く事で処理量を減少させます。

●─●─●　（原作）
↓
●───●　（真ん中の点を省略）

　この様に判定する点を間引いたことで副作用が生じます。
　上の例では、本来真ん中の点で検知していた部分が無くなったことで、
　１マス分の壁に貫かれるように転落してしまうことがあります。

　■■■
●───●　←空間扱いになってしまい、突き抜けて落ちる
　■■■

　このような配置は諦めるか、当該部分だけ元に戻す必要があります。

●オーディオレジスタ書き込み最適化(SW_WriteAudioReg)
　最適化効果:小(約88[cycle/frame])
　副作用　　:無
　追加容量　:無
　必要　　　:SW_WRAMMap

　オーディオ処理を最適化します。テーブルを使った最適化です。
　ゲーム中全てのフレームで最適化効果があります。
　副作用はないので、SW_WRAMMapを1にしたら、こちらも1にしましょう。

●NMI脱出処理の最適化(SW_NMIExit)
　最適化効果:小(約97[cycle/frame])
　副作用　　:無?
　追加容量　:無

　NMI処理を終えるときのルーチンの変更です。
　ゲーム中全てのフレームで最適化効果があります。
　たぶん副作用は無いと思うので、1にすると良いと思います。

●ゲージ描画処理の最適化(p)(SW_Gauge)
　最適化効果:中(約170[cycle/frame] / 28目盛りゲージ3本表示時)
　副作用　　:無
　追加容量　:無
　競合　　　:SW_SetupGaugeSprites

　最適化効果はゲージの表示数にもよります。
　ゲームシーンのほとんどのフレームで最適化効果があります。
　後述の(r)の方が効果が高いですが、
　こちらは追加容量がなく、また、値が29以上の時、28で表示されます。

●DMA転送元メモリクリアの最適化(SW_ClearDMASrc)
　最適化効果:中(約658[cycle/frame])
　副作用　　:無
　追加容量　:中

　ゲーム中のスプライトメモリのクリア処理をアンローリングして最適化します。
　ゲームシーンのほとんどのフレームで最適化効果があります。

●ロックマン圧死処理のフレーム間引き(SW_StampRockman)
　最適化効果:中(約300[cycle/frame]/判定を行わないフレームにおいて)
　副作用　　:中
　追加容量　:小

　ロックマンが壁に嵌って即死する処理を、フレーム方向に間引きます。
　判定の頻度が、16フレームに1度のみになるので、
　短い時間の嵌りを検知できずにスルーできてしまう副作用が発生します。
　ダストマンステージの天井プレスの仕掛けが動いている時は、毎フレーム判定を行います。
　強制スクロールの左端で、薄い壁を通り抜けられてしまうかもしれません。

●ロックマンの水泡発生の最適化(SW_RockBubble)
　最適化効果:中(約200[cycle/frame])
　副作用　　:小
　追加容量　:無

　このゲームは、ロックマンが水中で水泡を発生させるかを
　毎フレーム地形を読みに行って決定します。
　この処理を、「水中にいるフラグ」をみるように変更します。
　若干水泡の出方が変わってしまうかもしれません。

●メインループを抜ける処理の最適化(SW_MainLoopExit)
　最適化効果:小(12[cycle/frame])
　副作用　　:無
　追加容量　:無

　メインループを抜ける条件を調べる処理を僅かに最適化します。
　効果は小さいですが、副作用は無いので、1にしておくと良いでしょう。

●ワイヤーとモスラーヤの尾のセットアップにまつわる最適化(SW_SpriteSetup_WireMoth)
　最適化効果:小
　副作用　　:無?
　追加容量　:小

　ワイヤーとモスラーヤの尾のためのスプライトセットアップ処理が、
　スプライト処理の最内周に書いてあり、その部分を僅かに最適化します。
　スプライト１枚につき4クロックの最適化と、
　オブジェクト１つにつき2クロックのペナルティが生じます。（差し引きプラス）
　一方、ワイヤーとモスラーヤの尾のセットアップは少し重くなります。

●ワープカプセルの裏に回る処理を無効化(SW_DisableCapsuleForeground)
　最適化効果:小(16[cycle/frame])
　副作用　　:大
　追加容量　:無

　ワープカプセルの裏に回るための処理をバッサリカットします。
　SW_Haikeiと併用することになると思いますが、
　そちらのほうが処理が重いため、効果が疑問視されるかもしれません。
　SW_Haikeiは便利なので、Onにするという前提に立つと、
　カプセルの裏に回る処理をSW_Haikeiに任せ、こちらはOffにすることで、
　ゲーム全体では最適化されうるという発想です。

●SW_DisableCapsuleForegroundのための原作対応(SW_DisableCpslFrgnd_OrgHack)
　最適化効果:無
　副作用　　:無
　追加容量　:無

　最適化ではなく、
　SW_DisableCapsuleForeground、SW_Haikeiを使うときの、原作のための書き換えです。
　16x16タイルの属性が幾つか変更されます。

●虹足場の処理呼び出しの最適化(SW_RainbowStep)
　最適化効果:小(15[cycle/frame])
　副作用　　:無+
　追加容量　:小
　必要　　　:SW_WRAMMap

　マップ内に虹（＋リング）足場があるかどうかで、
　書き換え処理を呼び出すかどうかを決定するようにします。
　効果は軽微ですが、副作用的に、
　リングマンステージ以外でも虹足場を配置することが出来るようになります。
（ただし足場自体の設定は複数のステージで共用することになるのでややこしいことになる）

●メインループ内のサブルーチン呼び出しの調整(SW_EliminateJSRAtMainLoop)
　最適化効果:小(100[cycle/frame])
　副作用　　:無
　追加容量　:小

　メインループの最後のほうの幾つかのサブルーチン呼び出しについて、
　不要な場合呼び出しを行わないことで最適化します。
　たぶん副作用は無いので1にしておくと良いと思います。

●モジュレーションポインタセットアップの最適化(SW_AudioDriverModPointer)
　最適化効果:小(約44[cycle/frame])
　副作用　　:無+
　追加容量　:無

　サウンドドライバ内における、モジュレーションのポインタ取得処理にて
　直値を利用することで最適化します。
　副作用として、モジュレーションの定義数が127までに減ってしまいますが
　実用上は問題ないでしょう。


■■■■最適化(by Rock5easily)■■■■
●地形処理の最適化(SW_UseTableAtTerrainProc)
　最適化効果:中
　副作用　　:無
　追加容量　:中
　競合　　　:SW_WRAMMap

　オブジェクトと地形の接触判定を、テーブルを使って最適化します。
　副作用は無いため、
　SW_WRAMMapを使いたくないときはこちらを1にすると良いでしょう。

●パレット転送の最適化(SW_UnrollingPalTransfer)
　最適化効果:中(172[cycle/frame])
　副作用　　:無
　追加容量　:小

　NMI処理中のパレット転送処理をアンローリングして最適化します。
　効果は大きめで、パレットが変更された全てのフレームで最適化効果があります。
　チャージ中など、パレットが変更されるシチュエーションは多いです。

●ゲージ描画処理の最適化(r)(SW_SetupGaugeSprites)
　最適化効果:中(319[cycle/frame] / 28目盛りゲージ3本表示時)
　副作用　　:無+
　追加容量　:小
　競合　　　:SW_Gauge

　(p)同様ですが効果が高いです。最適化効果はゲージの表示数にもよります。
　ゲームシーンのほとんどのフレームで最適化効果があります。
　副作用は基本的にはありませんが、
　改造などで29以上の値を表示しようとすると表示がおかしくなってしまいます。

●空きスロット走査の最適化(SW_UnrollingSearchSlot)
　最適化効果:小
　副作用　　:無
　追加容量　:小

　オブジェクトの空きスロットを探す処理をアンローリングして最適化します。
　オブジェクトがなかなか見つからない＝オブジェクトが多い＝重くなりそう
　というときに効果が高くなるという点は大事かもしれません。

●オブジェクトポインタ更新の最適化(SW_UpdateObjectPointer)
　最適化効果:小(約67[cycle/frame])
　副作用　　:無+
　追加容量　:無

　一つのオブジェクトの処理が終了した後、
　次のオブジェクトに処理をバトンタッチするときの処理を最適化します。
　ゲームシーンのほとんどのフレームで最適化効果があります。
　オブジェクトの処理終了時にxレジスタに自分のメモリ番号を書かずに復帰する
　お行儀の悪いオブジェクトがあるとまずく、
　実際にガチャッポンが直進する弾を撃つフレームにそうなっていたので修正しています。

●パッド読み取りの最適化(SW_JoypadOmission)
　最適化効果:中(約283[cycle/frame])
　副作用　　:無+
　追加容量　:無

　パッド読み取り時、2コンの読み取り行わず、
　また、部分的にアンローリングして最適化します。
　ゲームシーンのほとんどのフレームで最適化効果があります。
　2コンを使って何かしたいという事はできなくなりますが、
　普通はそんなことしないので問題はないでしょう。

●スプライト処理の最適化(SW_UpdateOAMPointer)
　最適化効果:中
　副作用　　:無
　追加容量　:無

　スプライトセットアップの処理の最内周を微調整して最適化します。
　この処理は、画面上に多くの敵などが存在するときに多く通り、
　多いときは60回以上行われる処理なので、最適化効果は高くなります。

●オブジェクトの左右移動時の最適化(SW_ObjMoveLR)
　最適化効果:小
　副作用　　:無
　追加容量　:無

　効果は軽微ですが、副作用も無いので基本的に1にすると良いと思います。

●プログラムバンク切り替えの最適化(SW_BankSwitch)
　最適化効果:小
　副作用　　:無
　追加容量　:無

　プログラムバンク切り替えの機会は多いため、
　１回では小さな効果でもそれなりの効果が期待できます。
　基本的に1にすると良いと思います。

■■■■機能拡張等(by ぷれさべー)■■■■
●壁抜け抑止１(SW_FixTerrainThrough1)
　追加容量　:無
　必要　　　:SW_WRAMMap

　ラッシュジェット＋スライディング＋被弾による壁抜けを抑止します。

●壁抜け抑止２(SW_FixTerrainThrough2)
　追加容量　:小
　
　壁の内部にいる状態で被弾した時の壁抜けを抑止します。
　副作用として、被弾時のノックバックの挙動が、極わずかに変化します。

●敵無敵処理の調整(SW_ThroughInvincibleBoss)
　追加容量　:小

　ボスが無敵の間は、こちらの攻撃がスルーするようになります。
　ファラオマンがフラッシュストッパーで止まっている時の攻撃は受け止められてしまいます。
（その方が都合が良さげなのでそのままにしてあります）

●水中などでスライディングジャンプ(SW_SlidingJumpInWaterEtc)
　追加容量　:無

　ロックマン４では、水中やハシゴに重なった時に
　スライディング中のジャンプが不可能です。
　この項目を1にすると、そういった時でもスライディングジャンプ可能になります。

●瞬時回復(SW_QuickRecover)
　追加容量　:無

　ライフエネルギーや武器エネルギーを取った時、１目盛りずつ回復する演出を省き、
　全く硬直せずに一気に回復するようになります。
　演出よりプレイアビリティーを優先する項目です。

●高速フェードイン・フェードアウト(SW_QuickFade)
　追加容量　:無

　ゲーム中のたぶん全てのシーンにおいて、フェードの速度が上がります。
　これにより、素早く武器を切り替えることが出来るようになります。
　特殊武器をたくさん使ってプレイして欲しい改造を作りたいときにおすすめです。
　この項目は0か1以外の値を取ることも出来、
　その数字の分、１回のフェードに時間を書けるようになります。原作では04です。
　また、-1にすると1より早い時間でフェードします。

●サブ画面開閉後梯子を掴み続ける等(SW_ContinueGrabbingLadderEtc)
　追加容量　:小

　文字通り、梯子でサブ画面を開閉しても梯子を掴み続けます。
　また、ジャンプ中サブ画面を開閉した後、着地からの歩行をスムースに行うことが出来ます。
　ラッシュマリンに乗っている時は、原作通り、マリン状態が解除されます。

●スライディング中にサブ画面を開閉(SW_OpenSubScreenAtSliding)
　追加容量　:無
　必要　　　:SW_ContinueGrabbingLadderEtc

　文字通り、スライディング中にもサブ画面を開閉できるようになります。
　尚、これとSW_SwitchWeaponも1にした場合は、
　スライディング中にセレクト武器切り替えもできるようになります。

●セレクトによるクイック武器切り替え(SW_SwitchWeapon)
　追加容量　:中+
　必要　　　:SW_FastScroll

　セレクトボタンを用いて武器を切り替えることが可能になります。
　セレクト……順送り
　上＋セレクト……逆送り
　セレクト＋スタート……ロックバスターを装備
　となっております。
　切り替えた瞬間に武器を使うと、ほんの一瞬だけ画像が乱れることが有ります。

●被弾スパークの表示位置修正(SW_SparkPosition)
　追加容量　:小

　大きな敵に体当りするとわかりやすいですが、原作では、
　被弾時のスパーク出現位置が、何故か敵の位置になっています。
　この項目を1にすると、ロックマンの位置に発生するように修正されます。

●チャージショット射出後ロックマンの色修正(SW_FixChargeShotColorGlitch)
　追加容量　:無

　チャージショット射出フレームに色アニメが発生すると
　ロックマンの色がおかしくなります。
　この項目を1にすると、とりあえずそれが発生しなくなります。
　これについては、実は色々とうんちくがあるのですが、省略。

●スクエアマシンのバグ修正(SW_FixSquareMachineGlitch)
　追加容量　:小

　原作では、スクエアマシンの横の壁と画面端に挟まれてもダメージを受けません。
　この項目を1にすると、その場合でもダメージが発生するようになります。
　ちなみに、その時発生するダメージは、
　スクエアマシンのリフトに設定される体当たりダメージに依存するようにしてあります。

●ラッシュコイルジャンプ＋梯子のバグを修正(SW_FixRushJumpLadderGlitch)
　追加容量　:無

　ラッシュコイルで跳ねた後梯子を掴み、そのまま上まで登り切ると、
　次のジャンプが最大ジャンプになってしまう不具合があります。
　この項目を1にすると、梯子を登り切った時等に、ラッシュコイルジャンプフラグを下ろし、
　正常にジャンプできるようになります。

●８ボス撃破後画面中央に居ると起こるバグ修正(SW_Fix8BossCenterGlitch)
　追加容量　:小

　８ボスを倒した後のデモに２つ不具合があります。
　１つめは、ちょうど真ん中にロックマンが居ると、勝利音楽がなった後に、
　急に画面中央にワープして、能力吸引（？）を始めるものです。
　２つめは、１つめの条件に追加して、Y座標も一定位置にあると、
　能力吸引が勝利音楽と同時に行われるものです。
　この項目を1にすると、これらの現象が起こらなくなります。

●ラッシュアダプタ入手時拡張端子入力バグ修正(SW_ExPortGlitchAtWeaponGetSc)
　追加容量　:無

　ラッシュアダプタを入手時に、拡張端子につないだコントローラーに
　何でもいいから入力をしておくと、画面がバグります。その修正です。

●どこでも氷を利用可能(SW_AnywhereIce)
　追加容量　:小
　必要　　　:SW_WRAMMap

　通常、氷属性はコサックステージ１でしか利用できません。
　この項目を1にすると、どのステージでも氷が利用可能になります。
　また、僅かに最適化が行われます。

●ロックマンの武器の判定サイズ修正(SW_FixRockWeaponsCollision)
　追加容量　:無

　ダイブミサイル・リングブーメラン・ドリルボム・ダストクラッシャーの４つの武器は、
　それぞれ武器の判定サイズが指定されているにもかかわらず、
　なぜか続くプログラムで判定サイズに00（豆バスターサイズ）を書き込んでしまいます。
　この項目を1にすると、それぞれの判定サイズが利用されるようになり、
　結果として、どの武器も判定が大きくなります。（ダイブミサイルのみサイズ控えめ）

●ラッシュマリンに乗る前のバスター射出位置修正(SW_FixKickBuster)
　追加容量　:無

　ラッシュマリンを装備した状態で、マリンに乗り込む前にバスターを撃つと
　足元から弾が出てしまいます。その修正です。

●画面上空でオブジェクトが残留する現象を修正(SW_FixObjLeakOverScreen)
　追加容量　:小

　タケテントウのプロペラ等、画面上に飛んでいったものは
　いつまでも消えずにオブジェクトとして残留します。
　この項目を1にすると、画面上端からさらに１画面分上に行った
　オブジェクトが消滅するようになります。

　また、爆発など、アニメーションにより消えるはずだったオブジェクトが
　画面外（上の事が多いが）に出現すると、やはりオブジェクトが残留します。
　例えば、ドリルボムを画面の上の方で撃つと、爆発後消えることが無くなってしまい、
　次のドリルボムが撃てなくなります。
　この項目を1にすると、この現象も修正されます。

●レインフラッシュ不発現象を修正(SW_RainFlushMisfire)
　追加容量　:無

　レインフラッシュを撃った後、スライディングで素早く進んだりすると、
　レインフラッシュが不発になります。
　また、画面上の方でレインフラッシュを撃つと、なかなか攻撃が発動せず、
　忘れた頃に発動するという現象が起きます。
　この項目を1にすると、これらの現象が起こらなくなります。
　レインフラッシュは画面上に達してから一定時間が経つと攻撃発動するため、
　上の方で使うとすぐに発動する事になります。

●ワイヤーバグを修正(SW_FixWireGlitch)
　追加容量　:小

　ワイヤーを画面上ギリギリの位置で利用すると、下方向にワイヤー先端が飛んで行き、
　また、ワイヤーの部分の表示がおかしいという現象が起きます。
　さらに、強制スクロールに押されながらワイヤーを使うと、
　ワイヤーが画面外に出て動けなくなったり、
　あるいは巻取中だと上に移動し続ける不具合があります。
　この項目を1にすると、前者の現象は起こらなくなり、また、強制スクロールに
　少しでも押されてワイヤーと位置がずれると、ワイヤーが消滅するようになります。

●バルーンと天井の間で押しつぶされるバグ修正(SW_FixBalloonStampGlitch)
　追加容量　:無

　バルーン上でスライディングしてロックマンを天井に押し付けていると、
　バルーンが無くなった時に即死する不具合があります。
　この項目を1にすると、天井への嵌り方が少なくなり、即死しなくなります。

●動く足場で横からトゲに当たった時死なない現象を修正(SW_SpikeCollisionByPlatform)
　追加容量　:小

　ラッシュジェットなど、横に動く足場に乗っているロックマンがトゲに触っても
　自発的にその方向に押し込まない限りは死にません。
　この項目を1にすると、こういった場合にやられるようになります。
　副作用的に、オブジェクトの処理で簡単にロックマンをトゲ死させられるようになります。
（敵などのオブジェクトの処理の中で、メモリ$3Dに非ゼロを書き込んで下さい。
　通常のトゲと同様、被弾中・無敵中等は無効化されます）

●ラッシュマリンが天井の角に押しつぶされるバグを修正(SW_FixMarineStampGlitch)
　追加容量　:無

　ラッシュマリンに乗って、
　天井の角の部分に上手く位置を合わせて天井の下に入ると圧死してしまいます。
　この項目を1にすると、そのような配置にならないように移動範囲が調整されます。

●エスカルー＋フラッシュストッパーのハングバグを修正(SW_EscarooGlitch)
●スライディング中フラッシュストッパーがカウントされない仕様を修正(SW_SlidingFlashStopperGlitch)
●ノックバック中フラッシュストッパーがカウントされない仕様を修正(SW_KnockbackFlashStopperGlitch)
　追加容量　:小

　エスカルーの場所で着地際当たりにフラッシュストッパーを使うと
　ゲームが進行しなくなってしまいます。
　SW_EscarooGlitchを有効にすると、
　着地後硬直している時にもフラッシュストッパーの処理が進むようになり、
　結果的にゲームが進まなくなる減少を修正できます。
　ボスの部屋に入った瞬間使用した際、ボスの出現待ちをしているときにも
　フラッシュストッパーが進むようになります。
　同様に、スライディング中、ノックバック中も原作では
　フラッシュストッパーが進行しなくなっており、タイミングに寄っては
　画面がやや長めに真っ白になってしまうこともありましたが、
　それぞれのスイッチを有効にすると、
　それぞれの場合にフラッシュストッパーが進行するようになります。
　追加容量：小は、一つでも有効にすると発生しますが、
　一つ有効にしても、三つ有効にしても同じ容量です。

●トゲをダメージ化(SW_NerfedSpike)
　追加容量　:小
　推奨　　　:SW_SparkPosition

　トゲを即死ではなく、ダメージに変更します。
　この項目は0か1以外の値を取ることも出来、その値でダメージを指定します。
　SW_SparkPositionも有効でないと、変な場所にスパークが生成されてしまいます。

■■■■機能拡張等(by Rock5easily)■■■■
●特殊効果を持つオブジェクトを追加(SW_EffectEnemyEx)
　追加容量　:中

　設置オブジェクトF0-FFに色々な効果を割り当てます。
　※Rock5easilyさんのrock4_effectenemyexのドキュメントも参照下さい。

●16x16タイルに前景属性追加(SW_Haikei)
　追加容量　:中
　SW_WRAMMapがあると強化

　16x16タイルの属性E0に前景続性を追加します。
　つまりそのタイルに近づくと、ロックマンが背景の裏に回るようになります。
　この項目は、SW_WRAMMapが有効かどうかで少し挙動が変わります。

　SW_WRAMMapが無効の場合、元のパッチのように特定のアドレスを調べ
　ステージ毎に、この処理を有効にするかどうか設定します。
　元のパッチでは、79600〜7960Fにて各ステージで処理を有効にするかを設定しますが、
　本パッチにおいては、7A000〜7A00Fにて設定します。

　SW_WRAMMapが有効の場合、特に意識する必要はなく、
　自動でロックマンの居る部屋に属性E0が存在するかどうかを調べ、処理の有無を選択します。
　この場合は、7A000〜7A00Fは利用しません。

　このような配慮は、裏に回るための判定処理が重いという事実に基づくものです。
　※Rock5easilyさんのrock4_haikeiのドキュメントも参照下さい。

●高速スクロール(SW_FastScroll)
　追加容量　:大

　ロックマン４は、画像の転送の時間を稼ぐために、とてもゆっくりとスクロールします。
　この項目を1にすると、スクロールスピードが倍加します。
　※Rock5easilyさんのrock4_fastscrollのドキュメントも参照下さい。

●SW_FastScrollのための原作対応(SW_FastScroll_OrgHack)
　追加容量　:小

　SW_FastScrollを原作で利用する際の、各種必要な調整です。

●回復音から三角波・ノイズ除去(SW_DeleteTriWaveFromRefillSound)
　追加容量　:無

　rock4_fastscrollにこっそり組み込まれているものです。
　回復効果音は、何故か三角波とノイズ（共に無音）まで使うようになっており、
　その為、回復中やボスゲージ上昇中は、BGMが全く聞こえない状態になります。
　この項目を1にすると、サウンドドライバ内の効果音データを変更し、
　回復中でも三角波とノイズだけはBGMのものが鳴るようになります。
　音楽データを変更してある物にこの項目を利用してしまうとバグります。

●ボスゲージ上昇速度増加(SW_BossGaugeSpeed)
　追加容量　:無

　rock4_fastscrollにこっそり組み込まれているものです。
　ロックマン４は何故かボスゲージの上昇速度が他のシリーズより遅いです。
　この項目を設定することで、ゲージ上昇速度を変更できます。
　データが複数の場所に散在しており、バイナリでやろうとすると意外に面倒です。
　この項目は0か1以外の値を取ることも出来、
　1から9の場合、数値が小さいほど素早く上昇しますが、
　1だとゲージ音が聞こえなくなります。

●E缶利用時の上昇速度増加(SW_ETankSpeed)
　追加容量　:無

　rock4_fastscrollにこっそり組み込まれているものです。
　文字通り、E缶利用時のゲージの上昇速度を変更できます。
　この項目は0か1以外の値を取ることも出来、
　書かれた数値分のフレーム、１目盛り回復する毎にウェイトします。

●カスタムブロック追加(SW_CustomBlock)
　追加容量　:中
　SW_WRAMMapがあると強化

　この項目を1にすると、色々な属性の16x16タイルが追加/変更されます。
　SW_Haikeiもこれに含むべきの気がしますが、制作の履歴的にバラバラになっています。
　SW_WRAMMapがあると強化とありますが、これがないと処理がとても重くなってしまいます。
　強化というより、実用上必須かもしれません。
　追加される属性には、16x16タイルの未使用ビット(2bit分)も利用します。
　追加後の属性の一覧は以下のとおりです。

00 空間         04              08              0C              
10 壁           14              18              1C              
20 梯子(途中)   24              28              2C              
30 トゲ         34              38              3C              
40 梯子(上端)   44 飛び乗り足場 48 一通(上→下) 4C              
50 シャッター   54              58              5C              
60 水           64              68              6C              
70 特殊ブロック 74              78              7C              
80 水流(→)     84              88              8C              
90              94              98              9C              
A0 水流(←)     A4              A8              AC              
B0 氷           B4              B8              BC              
C0 水流(↓)     C4 流砂         C8 雪           CC              
D0 コンベア(→) D4 コンベア(←) D8              DC              
E0 前景         E4              E8              EC              
F0              F4              F8              FC              

　空欄は未使用を表します。腕に覚えがある方なら色々な属性を追加することも出来ます。
　一回の判定で幾つかの属性のものに同時に当たった場合、
　数値が大きいほど優先される、「強い」判定になるということにご注意下さい。

●SW_CustomBlockのための原作対応(SW_CustomBlock_OrgHack)
　SW_FastScrollを原作で利用する際の、各種必要な調整です。
　具体的にはトードマンステージの背景
　ファラオマンステージの流砂、コサック１の雪を修正します。

■■■■その他■■■■
●未使用領域の22埋め(FillUnusedSpace22)
　この項目をOnにすると、未使用であるらしいROM領域を22で埋めます。
　22はNesプロセッサの動作を止める非公開命令コードなので、
　間違えてその場所に制御を渡しちゃった時に、直ぐに検出できます。
　他にもプロセッサ停止のコードはありますが、
　22は上位下位の値が同じのため、視認性が良く、
　また、バイナリエディタでタイプしやすいので、22を選びました。
　改造のためにガリガリデータやコードを追加したい方は、
　これをOnにしておくと、目印になるでしょう。

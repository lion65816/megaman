改造にあたって、Data Crystalの資料を参照しています。
そのため、この資料にもData Crystalの資料内の用語が使われている箇所が多くあります。
資料内のアドレスはすべてNESヘッダ$10バイトを含んだ形になっています。
資料内のbitの数え方は最上位bitがbit7、最下位bitがbit0となっています。
間違っていたらゴメンナサイ。

-----------------------------------------------

EnemyIDは、ステージのデザイン時にオブジェクトを配置するために使う番号です。
ゲーム中の実際のオブジェクトの管理はObjectID(Sprite type)を使用します。
番号が$C0～FFのものはEffect Enemyと呼ばれ、パレットやBGバンクの変更に用いられます。

00 プカプッカー
01 コーカーＱ
02 ボンビャー
03 スペースメットール
04 スマトラン
05 マウスベール
06 新シールドアタッカー
07 レンバクン
08 メットール砲台
09 メットールＫ－１０００
0A 落下するクリスタル
0B V（ブイ）(ウェーブマンステージ水上バイクのときの障害物)
0C パワーマッスラー
0D アパッチジョー
0E 鉄キューン(逆さ)
0F 鉄キューン

10 ミザイル
11 スターマンステージの隕石
12 グラビットン
13 ウェーブマンステージの噴き出す水
14 タテパッカン
15 フージーン
16 ボンバースローン
17 ライダージョー(水上バイクに乗ったジョー)(左を向きながらゆっくり右へ)
18 クリスタルジョー
19 スージーG
1A スージーG(逆さ)
1B ユードーン(誘導ミサイルを撃ってくる敵)
1C ひらりあん４２７(近づくと天井から落ちてくる敵)
1D ツインキャノン
1E ダチョーン
1F ダチョーン

20 ダイダイン(上に進む)
21 ダイダイン(右上に進む)
22 ダイダイン(右に進む)
23 ダイダイン(右下に進む)
24 ダイダイン(下に進む)
25 ダイダイン(左下に進む)
26 ダイダイン(左に進む)
27 ダイダイン(左上に進む)
28 ライダージョー(左から突っ込んでくる)
29 メットール・スイム
2A ノビータ
2B バウンダー
2C トスマシーン
2D ギリー(時計回り・遅い)
2E ギリー(反時計回り・速い)
2F ギリー(時計回り・速い)

30 ギリー(反時計回り・遅い)
31 メットール・マミー
32 スベール
33 トンデオール
34 ターバン
35 ロックスローン
36 プカベリー
37 ジェットボム
38 ラウンダー
39 コッココロコロ
3A イルカーン
3B B・ビッター
3C ギリー
3D ギリー
3E ギリー
3F プカベリー

40 チャージマンステージの電車内に入る
41 ウェーブマンステージのパイプに入る
42 重力反転(↓|↑)
43 重力反転(↑|↓)
44 重力反転縦長(↓|↑)
45 重力反転縦長(↑|↓)
46 重力反転(↑/↓)
47 天井が上下する
48 床が上昇する(ジャイロマンステージの最初)
49 床が上昇する(ジャイロマンステージの終盤)
4A ？
4B 床・天井が上下する
4C ローリングドリル
4D 背景の上部がスクロールする(水上スキーの背景みたく)
4E 水上バイク
4F 見えない敵？

50 オクトーパーＯＡ
51 何もなし？
52 何かの台？
53 何かの台？
54 何かの台？
55 何かの台？画面がスクロールしなくなる
56 ブルースステージ３の進むブロック足場
57 ブルースステージ３の進むブロック足場
58 ブーンブロック
59 ビッグベッツ？
5A 何もなし？
5B 何もなし？
5C ボス？
5D ボス？
5E ダークマン４号？
5F ワイリーマシン５号？

60 カモーン
61 リリック
62 ストーンマン
63 チャージマン
64 ジャイロマン
65 グラビティーマン
66 クリスタルマン
67 ウェーブマン
68 ナパームマン
69 スターマン
6A ダークマン２号
6B ダークマン３号
6C ダークマン１号
6D 何もなし？(ObjectIDが00に設定されているので多分未使用)
6E 何もなし？(ObjectIDが00に設定されているので多分未使用)
6F 何もなし？(ObjectIDが00に設定されているので多分未使用)

70 ワープする？
71 ワープするライフエネルギー回復？
72 ライト博士
73 何もなし？(ObjectIDが00に設定されているので多分未使用)
74 何もなし？(ObjectIDが00に設定されているので多分未使用)
75 何もなし？(ObjectIDが00に設定されているので多分未使用)
76 何もなし？(ObjectIDが00に設定されているので多分未使用)
77 何もなし？(ObjectIDが00に設定されているので多分未使用)
78 何もなし？(ObjectIDが00に設定されているので多分未使用)
79 何もなし？(ObjectIDが00に設定されているので多分未使用)
7A 何もなし？(ObjectIDが00に設定されているので多分未使用)
7B 何もなし？(ObjectIDが00に設定されているので多分未使用)
7C 何もなし？(ObjectIDが00に設定されているので多分未使用)
7D 何もなし？(ObjectIDが00に設定されているので多分未使用)
7E 何もなし？(ObjectIDが00に設定されているので多分未使用)
7F ギリー

80 エディー
81 Ｅ缶
82 Ｍ缶
83 1UP
84 ライフエネルギー回復大
85 ライフエネルギー回復小
86 武器エネルギー回復大
87 武器エネルギー回復小
88 Ｒプレート
89 Ｏプレート
8A Ｃプレート
8B Ｋプレート
8C Ｍプレート
8D Ａプレート
8E Ｎプレート
8F ５プレート

90-BF 定義なし

C0-FF Effect Enemy
  
---------------------------------------------------------------

オブジェクト設置データに基づきオブジェクトの生成が行われる際に、参照されるオブジェクトの初期値データです。

$37A52～37AE1 (90) = EnemyID: Display flags
主にオブジェクトが画面にどのように表示されるかを決める。

　bit7 -> 出現時、オブジェクトの向きに関係なくグラフィックを左右反転させない(例えば、E缶など常に同じ向きに出現させたい場合に使用)
　bit6 -> グラフィックを上下反転させる
　bit5 -> グラフィックを左右反転させる
　bit4 -> 背景に隠れる
　bit3 -> 画面外に出たときそのオブジェクトを破壊しない
　bit2 -> 不可視
　bit1 -> ブロックになる(そのオブジェクトを通り抜けられなくなり上に乗れるようになる、例えばブーンブロックはこの属性を持つ)
　bit0 -> 足場になる(そのオブジェクトの上に乗れるようになる、例えばダイダインはこの属性を持つ)


$37AE2～37B71 (90) = EnemyID: ObjectID(Sprite type)
EnemyID→ObjectIDへの変換表。

$37B72～37C01 (90) = EnemyID: Type Bits(Sprite flags)
ロックマンに対する当たり判定の有無、武器に対する当たり判定の有無、当たり判定の大きさを決める。

　bit7 -> ロックマンに対して当たり判定あり(そのオブジェクトに触れるとダメージを受ける)
　bit6 -> 武器に対して当たり判定あり
　bit5-0 -> 当たり判定の大きさ(参照番号、$00～3F)


$37C02～37C91 (90) = EnemyID: SpriteID(Animation)
オブジェクトのグラフィックをアニメーション番号で指定する。

$37C92～37D21 (90) = EnemyID: Hit Points(Life)
オブジェクトのHP。

$37D22～37DB1 (90) = EnemyID: X方向速度テーブルの参照番号(00～07)
オブジェクトのデフォルトのX方向速度を指定する(下記を参照)。
Y方向速度はFF.00(-1)が勝手にセットされる。

・X方向速度テーブル
$37DB2～37DB9 (8) = 参照番号 : X方向速度(low)
$37DBA～37DC1 (8) = 参照番号 : X方向速度(high)

以下、テーブルの中身
00 01.00
01 00.CC
02 01.33
03 02.00
04 01.80
05 00.80
06 04.00
07 03.00

--------------------------------------------

Effect Enemyは、EnemyIDが$C0～FFのものを指し、BGパレットやBGバンクの変更に用いられます。
また、Effect Enemyはオブジェクトメモリにオブジェクトを生成しません。

$37DC2～37DF1 (30) = Effect Enemy ID: Reference Data 1
$37DF2～37E21 (30) = Effect Enemy ID: Reference Data 2 
$37E22～37E65 (44) = Effect Enemy Data: Extra Palette Data 
$37E66～37E7F (1A) = Effect Enemy Data: CHR Bank Data 

Data Crystalの資料には、上のように書かれている。
Effect Enemy IDは、EnemyIDの$C0番を0番と数えたときの値である。
Reference Data 1,2の値(以下、Ref1,Ref2と記する)によって、 各々のEffect Enemyが何を変更するのか決まる。
Ref1,Ref2の値 	効果
Ref1 ≧ $80 	BGアニメーションの変更
$10 ≦ Ref1 ＜ $80 	BGバンクの変更
Ref1 ＜ $10 かつ Ref2 ≧ $80 	BGパレットアニメーションの変更
Ref1 ＜ $10 かつ Ref2 ＜ $80 	BGパレットの変更(BGバンクの変更を含む場合あり)

・BGアニメーションの変更
　番号Ref1のBGアニメーションをさせる。

・BGバンクの変更
　CHR Bank DataのRef1番のBGバンク定義を読み込み。

・BGパレットアニメーションの変更(ここで言うパレットの番号は4色1組で数えたのもの。00,01,02,03)
　番号Ref1のパレットに、番号Ref2(最上位bitは無視)のパレットアニメーションをさせる。

・BGパレットの変更(ここで言うパレットの番号は1色ずつ数えたときのもの。00,04,08,0C)
　番号(Ref1 + 1)～(Ref + 3)のパレットに、Extra Palette DataのRef2番のパレット定義を読み込み。

◇Extra Palette Data
　4bytesで1組のパレット, $44 / 4 = $11 = 17種類。
　byte 0 -> BGバンクの変更(この値をRef1として下を参照、00で変更なし)
　byte 1-3 -> パレットの色(透明色は省略)

◇CHR Bank Data
　2bytesで1組のデータ。BGバンク番号が並んでいる。

----------------------------------------------------------------

ObjectID(Sprite type)は、ステージのデザイン時に使用するEnemyIDとは異なり、 ゲーム中のオブジェクトの管理に用いる番号です。

00 何もなし(オブジェクトメモリ未使用)
01 ブーンブロック等いろいろ
02 ラッシュコイル
03 ティウンの玉？
04 チャージマンステージの電車内に入る
05 ウェーブマンステージのパイプに入る
06 重力反転(↓|↑)
07 重力反転(↑|↓)
08 重力反転(↑/↓)
09 天井が上下する
0A 床が上昇する(ジャイロマンステージの最初)
0B 床が上昇する(ジャイロマンステージの終盤)
0C 落ちるブロック？
0D ウェーブマンステージの乗れる泡
0E ウェーブマンステージの乗れる泡(生成機)
0F 床・天井が上下する

10 プカプッカー
11 プカプッカーの頭
12 コーカーQ
13 ボンビャー
14 ボンビャーの爆弾
15 スペースメットール
16 スマトラン
17 マウスベール
18 新シールドアタッカー
19 レンバクン
1A レンバクンの爆弾
1B メットール砲台
1C メットール砲台の出す弾
1D メットールK-1000
1E 何もしない？
1F V(ブイ)

20 パワーマッスラー
21 アパッチジョー
22 エディー
23 鉄キューン
24 ミザイル(生成機)
25 ミザイル
26 落下するクリスタル
27 ウェーブマンステージの噴き出す水
28 グラビットン
29 グラビットンの出す弾
2A クリスタルジョー
2B タテパッカン
2C タテパッカンの出す弾
2D クリスタルジョーの出すクリスタル
2E ダイダイン
2F ボンバースローンの玉の爆発

30 オクトーパーOA・ワイリーステージボスの爆発
31 フージーン
32 フージーンの出す弾
33 ボンバースローン
34 ボンバースローンの出す玉
35 ライダージョー
36 スージーG
37 ライダージョーの出す弾
38 スターマンステージの隕石(隕石を生成)
39 スターマンステージの隕石
3A ノビータ
3B バウンダー
3C バウンダーの出す弾
3D ギリー
3E トスマシーン
3F トスマシーンの出す弾

40 ローリングドリル
41 背景の上部がスクロールする(水上スキーの背景みたく)
42 水上バイク
43 EnemyID 4F 見えない敵？
44 オクトーパーOA
45 ラッシュジェット
46 弾かれた武器(バスター、ジャイロアタックetc)
47 EnemyID 51 何もなし？・ワイリーカプセルの地面を這う弾
48 EnemyID 52～54 何かの台？
49 EnemyID 55
4A ブルースステージ3の進むブロック足場
4B ブルースステージ3の進むブロック足場
4C ブーンブロック(ブロックを生成)
4D
4E オクトーパーOAの弾
4F ビッグペッツ？

50 メットール・マミー
51 メットール・マミーの出す弾
52 コッココロコロの歩く卵
53 スベール
54 トンデオール
55 アパッチジョーの出す弾・メットールK-1000の出す弾・ターバンの出す弾
56 ターバン
57 エディーの出したアイテム
58 スージーGの出す弾
59 ユードーン
5A ジェットボム
5B ジェットボムの破片
5C ラウンダー
5D コッココロコロ
5E ロックスローンの岩が砕ける
5F イルカーン

60 B・ビッター
61 B・ビッターの出す弾
62 ユードーンのミサイル
63 ひらりあん427
64 ツインキャノン
65 ツインキャノンの出す弾(速い方)
66 プカペリー
67 カモーン
68 リリック
69 ストーンマン
6A ストーンマンのパワーストーン
6B チャージマン
6C チャージマンの石炭を出す前の上る煙・チャージマンの落とす石炭
6D ジャイロマンの飛び上がるときの地面のエフェクト？・チャージマンの煙突の煙・L缶
6E ジャイロマン
6F ジャイロマンのプロペラ　→・[停止]・↑

70 ロックバスター、スーパーロックバスター？
71 ビッグペッツの胸
72 ナパームボム(ロックマン使用)
73 クリスタルアイ(ロックマン使用)
74 ジャイロアタック(ロックマン使用)
75 ウォーターウェーブ(ロックマン使用)
76 スーパーアロー
77 スタークラッシュ(ロックマン使用)
78 パワーストーン(ロックマン使用)
79 ビート
7A ビッグペッツの胴体
7B
7C サークリングQ9
7D サークリングQ9の足場
7E サークリングQ9の大弾
7F サークリングQ9の弾

80 ジャイロマンのプロペラ　↓・[停止]・→
81 グラビティーマン
82 グラビティーマンの出す弾
83 クリスタルマン
84 クリスタルマンの反射する弾
85 クリスタルマンの通常弾
86 ウェーブマン
87 ウェーブマンのモリ
88 ウェーブマンの吹き出る水
89 ナパームマン
8A ナパームマンの横に飛ぶ弾
8B ナパームマンの手投げ弾
8C ナパームマンの武器の爆発
8D スターマン
8E スタークラッシュ(スターマン使用)
8F

90
91 ダークマン2号
92 ダークマン2号のバリア
93 ダークマン3号
94 ダークマン3号の弾
95 ダークマン3号の石化弾
96 ダークマン1号
97
98 ダークマン4号
99 ダークマン4号のバリア
9A ダークマン4号の弾
9B ツインキャノンの出す弾(遅い方)
9C ダチョーン
9D ダチョーンの出すレーザー
9E メットール・スイム
9F

A0 ワイリープレス
A1 ワイリープレスの何か
A2 偽ブルース・ダークマン4号？
A3 偽ブルース・ブルースの弾
A4 ブルース
A5 ワイリーマシン5号
A6 ワイリーマシン5号の吸い込み
A7 ワイリーマシン5号の青弾
A8 ワイリーマシン5号のミサイル
A9
AA ワイリーカプセル
AB ワイリーカプセルの回る弾
AC
AD
AE
AF ワープする？

B0 ワープするライフエネルギー回復？(ボスラッシュ時のボスが落とす)
B1
B2 ワイリーマシン5号の何か
B3 EnemyID 62～6C ８体ボス＋ダークマン1,2,3号
B4 8ボス+ダークマン1,2,3,4号撃破後の演出処理
B5 偽ブルース→ダークマン4号
B6 EnemyID 81～8F E缶、M缶、ライフ・武器エネルギー回復、ROCKMAN5各プレート
B7 敵の落としたアイテム？
B8 敵を倒した瞬間の爆発？
B9 ライト博士
BA
BB
BC
BD ロックスローン
BE ロックスローンの出す岩
BF

C0
C1
C2 ナパームボムの爆風
C3
C4 メットール・マミーの子供
C5 グラビティーホールド
C6 グラビティーホールドで倒した敵(sprite dataのバンクが#$12)
C7 グラビティーホールドで倒した敵(sprite dataのバンクが#$14)
C8 グラビティーホールドで倒した敵(sprite dataのバンクが#$16)
C9 多分未使用
CA 多分未使用
CB 多分未使用
CC 多分未使用
CD 多分未使用
CE 多分未使用
CF 多分未使用
  
----------------------------

各種武器がオブジェクトに与えるダメージ、またオブジェクトがロックマンに与えるダメージに関する記述です。

◇ロックバスターが有効かどうか
$810～90F (100) = ObjectID: ロックバスターが有効かどうか(01 -> 有効、 00 -> 無効)

◇特殊武器が与えるダメージ(ObjectID: ダメージ値)
$2810～290F ウォーターウェーブ
$4810～490F ジャイロアタック
$6810～690F クリスタルアイ
$8810～890F ナパームボム
$A810～A90F スーパーアロー
$C810～C90F パワーストーン
$E810～E90F グラビティーホールド
$10810～1090F チャージキック
$12810～1290F スタークラッシュ
$14810～1490F ラッシュコイル(ロックマンのバスター)
$16810～1690F ラッシュジェット(ロックマンのバスター)
$18810～1890F ビート

ウォーターウェーブ・スタークラッシュに関しては、80を指定すると接触したオブジェクトをHP関係なく消滅させる。
また、チャージキックに関しては、80を指定するとチャージキック中でもロックマンがダメージを受ける。

◇オブジェクトのType Bits(Sprite flags)の6bit目(shield属性)との関係

武器ダメージ=0 & shield属性=0 -> 攻撃すり抜け
武器ダメージ=0 & shield属性=1 -> 攻撃を弾く
武器ダメージ>0 & shield属性=0 -> 攻撃を弾く
武器ダメージ>0 & shield属性=1 -> ダメージ

◇オブジェクトとの接触時、ロックマンが受けるダメージ
$385D3～386D2 (100) = ObjectID: ダメージ値

------------------------------------------------------------

全エネルギー満タン時にM缶を使用した場合に1UPに変わるオブジェクトの指定です。

◇M缶を使用したときに1UPに変わるオブジェクト
$103F8～104F7 (100) = ObjectID : 1UPに変わるか(00 or B6)

1UPに変わるならB6、変わらないなら00を指定する(B6は設置型アイテムを表すObjectID)。

--------------------------------------------------------------

各種武器のエネルギー消費量を表します。

$36121 チャージキック
$3729E ジャイロアタック・クリスタルアイ(共有)
$373EA ナパームボム
$37342 ウォーターウェーブ
$37486 パワーストーン
$374DB グラビティーホールド
$382AB ビート
$3B1F3 ラッシュコイル

◇スタークラッシュ
$3825F 装備中に敵の弾などに当たって消えるとき
$3B660 発射したとき

◇スーパーアロー
$37398 発射時
$3B599 アローに乗っているとき、1メモリが減るまでのフレーム数
$3B59E アローに乗っているとき、一度に減らすエネルギー量

◇ラッシュジェット
$3B2CD 乗ってから最初の1メモリが減るまでのフレーム数
$3B2D7 1メモリが減るまでのフレーム数
$3B2DC 一度に減らすエネルギー量

---------------------------------------------------------------------

エディーが出すアイテムや、敵が落とすアイテムを表します。

◇エディーの出すアイテム
$3ADD4～3ADDB
8bytes並んだデータ(アニメーション番号で指定)、この中からランダムで選択される。

・アニメーション番号(以下16進数)
72 E缶
73 M缶
74 ライフエネルギー回復大
75 ライフエネルギー回復小
76 武器エネルギー回復大
77 武器エネルギー回復小
78 1UP
79～80 各ROCKMAN5プレート


◇敵の落とすアイテム
敵撃破時に$00以上$32未満(?)の擬似乱数を発生させてドロップ範囲内にあるアイテムを落とす。

$3AE89 発生させる擬似乱数の上限？
$3AF2B～$3AF2F ドロップ範囲
$3AF30～$3AF34 ドロップアイテム(アニメーション番号で指定、上を参照)

本家では以下のように設定されている。
    02  03      08   0A     0E
---+---+-------+----+------+------
 76| 78|   75  |  74|   77 |  落とさない

この場合、発生させた擬似乱数の値に対して、

$00～01 76(武器エネルギー回復大)
$02     78(1UP)
$03～07 75(ライフエネルギー回復小)
$08～09 74(ライフエネルギー回復大)
$0A～0D 77(武器エネルギー回復小)
$0E～   落とさない

となる。

--------------------------------------------------------------------

当たり判定の大きさに関する記述です。
◇ロックマンとオブジェクトとの当たり判定

$3F101～3F140 (40) = 当たり判定参照番号 : X方向の当たり判定値
$3F0C1～3F100 (40) = 当たり判定参照番号 : Y方向の当たり判定値

|ロックマンのX座標 - オブジェクトのX座標| ＜ X方向の当たり判定値
かつ
|ロックマンのY座標 - オブジェクトのY座標| ＜ Y方向の当たり判定値
のときロックマンとオブジェクトが接触したと判定される。

以下、ロックマンのサイズを16 x 24と考えたときの当たり判定値から逆算した参照番号毎の大きさリスト(X x Y)
(それぞれ X=2*(X方向の当たり判定値 - 8), Y=2*(Y方向の当たり判定値 - 12) で算出)

00  16 x  16
01  12 x  12
02  16 x 208
03 224 x  16
04  16 x  96
05   8 x   8
06   6 x   6
07   4 x   4
08  20 x  20
09  24 x  32
0A  12 x   4
0B  24 x  24
0C  20 x  24
0D  24 x  16
0E  16 x  12
0F  24 x  40

10  12 x  24
11  16 x   8
12  16 x  28
13  12 x  32
14  12 x  40
15  12 x  48
16   8 x  12
17  20 x  32
18  12 x  56
19  24 x  48
1A  16 x   4
1B   4 x  12
1C   4 x  24
1D  96 x  16
1E  80 x  16
1F  64 x  16

20   6 x  16
21  48 x  32
22  24 x   8
23   6 x   4
24  32 x  32
25  32 x  80
26 128 x  32
27  80 x 128
28   8 x  40
29  96 x  32
2A  64 x  24
2B  16 x 144
2C  64 x 144
2D  48 x  48
2E  32 x  48
2F  40 x  40

30  12 x  16
31  48 x  16
32  56 x  32
33  64 x  32
34   0 x   0
35   0 x   0
36   0 x   0
37   0 x   0
38   0 x   0
39   0 x   0
3A   0 x   0
3B   0 x   0
3C   0 x   0
3D   0 x   0
3E   0 x   0
3F   0 x   0

◇特殊武器とオブジェクトとの当たり判定

$3F155～3F168 (14) = Shot type : 特殊武器とオブジェクトとのX方向の当たり判定値
$3F141～3F154 (14) = Shot type : 特殊武器とオブジェクトとのY方向の当たり判定値

この当たり判定値は符号付整数と考える。

|特殊武器のX座標 - オブジェクトのX座標| ＜ ロックマンとオブジェクトとのX方向の当たり判定値 - 特殊武器とオブジェクトとのX方向の当たり判定値
かつ
|特殊武器のY座標 - オブジェクトのY座標| ＜ ロックマンとオブジェクトとのY方向の当たり判定値 - 特殊武器とオブジェクトとのY方向の当たり判定値
のとき特殊武器とオブジェクトが接触したと判定される。

以下、ロックマンのサイズを16 x 24と考えたときの当たり判定値から逆算したShot type毎の大きさリスト(X x Y)
(それぞれ X=2*(8 - X方向の当たり判定値), Y=2*(12 - Y方向の当たり判定値) で算出)

00   6 x   4
01   4 x   8
02  24 x   8
03   6 x  16
04  16 x   8
05  24 x   4
06  16 x  16
07 256 x 240
08   6 x   4
09  40 x  40
0A   6 x   4
0B   6 x   4
0C   8 x   8
0D  12 x  12
0E  16 x  24
0F   8 x   8
10   4 x  16
11   4 x  24
12   4 x  32
13  24 x  24


Shot type
00 ロックバスター
01 ウォーターウェーブ(アニメーションフレーム0)
02 ジャイロアタック
03 クリスタルアイ(分裂前)
04 ナパームボム(爆発前)
05 スーパーアロー
06 パワーストーン
07 グラビティーホールド
08
09 スタークラッシュ
0A
0B
0C ビート
0D 中途半端なチャージショット
0E スーパーロックバスター
0F クリスタルアイ(分裂後)
10 ウォーターウェーブ(アニメーションフレーム1, 5)
11 ウォーターウェーブ(アニメーションフレーム2, 4)
12 ウォーターウェーブ(アニメーションフレーム3)
13 ナパームボムの爆風

※ビート呼び出し中にロックバスターを撃つと、Shot typeが00に変更されビートの当たり判定が若干小さくなってしまう(？)。

--------------------------------------------------------------------

パスワードの解析結果です。

◇赤玉・青玉の意味
　赤玉:クリアしたステージ
　青玉:取得したROCKMAN5プレート


◇各列の意味
　本家では、以下のように1,2列目、3,4列目、5,6列目によって対応するクリアステージ・取得プレートの
　種類を分けている(マス目を3つの集合に分けている)。

  1 2  3 4  5 6
A□□ □□ □□
B□□ □□ □□
C□□ □□ □□
D□□ □□ □□
E□□ □□ □□
F□□ □□ □□

1,2列目:クリスタル,ナパーム : N,5プレート
3,4列目:チャージ,スター,ジャイロ : K,M,Aプレート
5,6列目:ストーン,ウェーブ,グラビティー : R,O,Cプレート


◇格子番号
　各マス目に以下のように番号をつける。
   1  2  3  4  5  6
 +------------------
A|00 04 08 0C 10 14
B|18 1C 20 24 28 2C
C|30 34 38 3C 40 44
D|48 4C 50 54 58 5C
E|60 64 68 6C 70 74
F|78 7C 80 84 88 8C

◇クリスタル,ナパーム : N,5プレート
・$2F0F1～2F0F4 クリスタル・ナパームステージをクリアしているかどうかを決める赤玉の位置
　アドレス($2F0F1 + (ビットフラグ値))に赤玉の位置を入れる(格子番号を入れる)。
　N,5プレートを取得しているかどうかを決める青玉の位置も基本的にこのデータが使われる。
　
・ビットフラグ
0000 00XX
       ||
       |+-ナパーム
       +--クリスタル
       
0000 00XX
       ||
       |+-N
       +--5

　ただし、ビットフラグ値が等しくなる場合(例えば、ナパーム・クリスタルマンステージをクリアしていて、
　N,5プレートを両方取得している場合は両方のビットフラグ値が03)、赤玉と青玉の位置が重なってしまうため、
　青玉の位置は別途定義する。

・$2F108～2F10B N,5プレートを取得しているかどうかを決める青玉の位置(赤玉とビットフラグ値が重なった場合)


◇チャージ,スター,ジャイロ : K,M,Aプレート
・$2F0F6～2F0FD チャージ・スター・ジャイロステージをクリアしているかどうかを決める赤玉の位置
　細かい点は上と同様。
　
・ビットフラグ
0000 0XXX
      |||
      ||+-ジャイロ
      |+--スター
      +---チャージ
      
0000 0XXX
      |||
      ||+-K
      |+--M
      +---A

・$2F10D～2F114 K,M,Aプレートを取得しているかどうかを決める青玉の位置(赤玉とビットフラグ値が重なった場合)


◇ストーン,ウェーブ,グラビティー : R,O,Cプレート
・$2F0FF～2F106 ストーン,ウェーブ,グラビティーステージをクリアしているかどうかを決める赤玉の位置
　細かい点は上と同様。
　
・ビットフラグ
0000 0XXX
      |||
      ||+-グラビティー
      |+--ウェーブ
      +---ストーン
      
0000 0XXX
      |||
      ||+-R
      |+--O
      +---C

・$2F116～2F11D R,O,Cプレートを取得しているかどうかを決める青玉の位置(赤玉とビットフラグ値が重なった場合)


◇パスワード復帰時の取得武器
・$2F11E～2F12D パスワード復帰時のクリアステージと取得武器の対応
　2bytesで1組。1つのステージにつき2つまでの取得武器を決められる。2つ目が必要ない場合は00を入れる。
　グラビティー,ウェーブ,ストーン,ジャイロ,スター,チャージ,ナパーム,クリスタルの順

武器番号
01 ウォーターウェーブ
02 ジャイロアタック
03 クリスタルアイ
04 ナパームボム
05 スーパーアロー
06 パワーストーン
07 グラビティーホールド
08 チャージキック
09 スタークラッシュ
0A ラッシュコイル
0B ラッシュジェット
0C ビート

-------------------------------------------------------------

各8ボスステージをクリアした際に取得できる武器のデータです。

◇8ボスステージクリア時の取得武器
・$2EF0C-2EF13 (8) = ステージ番号: $2EF14を基点とした各武器取得メッセージの先頭アドレス

武器取得メッセージ「YOU GOT ～ .」の"."(2E)の後ろ2bytesが取得武器。
1つのステージにつき2つまでの取得武器を決められる。2つ目が必要ない場合は00を入れる。
例えば、メッセージ「YOU GOT GYRO ATTACK AND RUSH JET.」の後ろの2bytesは
02 ジャイロアタック
0B ラッシュジェット
となっている。

武器番号
01 ウォーターウェーブ
02 ジャイロアタック
03 クリスタルアイ
04 ナパームボム
05 スーパーアロー
06 パワーストーン
07 グラビティーホールド
08 チャージキック
09 スタークラッシュ
0A ラッシュコイル
0B ラッシュジェット
0C ビート

-------------------------------------------------------------

スクロール・中間地点のデータです。

◇スクロールデータ
$960～977 スクロール方向 (アドレスにステージ番号 * $2000を加えてください)

20 + XX 右の後XX部屋だけ右(XX:00～1F)
40 下
60 + XX 下の後XX部屋だけ右(XX:00～1F)
80 上
A0 + XX 上の後XX部屋だけ右(XX:00～1F)


$978～98F スクロール毎の効果指定 (アドレスにステージ番号 * $2000を加えてください)
bit7 シャッターの有無
bit6 左の部屋に戻れるか
bit5-0 効果番号指定(00～3F、以下に効果を記す)

・効果指定(スクロール開始時に効果が現れる)
00で変更なし
$AE + (効果番号 - 1)*8から8bytesのデータ(全部で63個)

byte0   -> BGパレット・BGパレットアニメーションを変更(最上位bitが0なら変更なし,80,81,82,83のどれかを指定)(*)
byte1-3 -> スプライトのパレット(パレット2、透明色は省略)
byte4   -> BGバンク1を変更(00で変更なし)
byte5-7 -> スプライトのパレット(パレット3、透明色は省略)

(*)指定データ
$998 + (指定した値 - $80) * 20 (アドレスにステージ番号 * $2000を加えてください)
20bytesで1個のデータ

byte0-15  -> BGパレット
byte16-19 -> 各BGパレットのアニメーション番号

※$998-9ABはステージ開始時の設定として使われる。


◇マルチスクロール(分岐)
$9F0～A0F スクロールデータ (アドレスにステージ番号 * $2000を加えてください)

4bytesで1個のデータ(8個分持てる)
byte0 -> スクロールを使用する部屋番号
byte1 -> スクロール方向(40(下),80(上)のみ？)
byte2 -> スクロール先の部屋番号
byte3 -> スクロール後の通常のスクロールデータ番号


◇中間地点
$2F176～2F1D5 中間地点データ
3bytesで1個のデータ。1つのステージにつき2つもてる。
$2F176 + ステージ番号*6で各ステージの1つ目のデータの先頭(2つ目はその3bytes後)

byte0 -> 画面の番号
byte1 -> どのスクロールデータを使うか
byte2 -> 復帰時のBGバンク、BGアニメーション、BGパレット、BGパレットアニメーションの指定(*)

(*)指定データ
$161CD + (指定した値 - 1) * 24から24bytesのデータ

byte0     -> BGバンク0
byte1     -> BGバンク1
byte2     -> ダミーデータ
byte3     -> BGアニメーション番号
byte4-19  -> BGパレット
byte20-23 -> 各BGパレットのアニメーション番号

---------------------------------------------------------------------------

シャッターのデータです。

◇シャッターを開く位置
アドレス($03D241 + (ステージ番号 * 8))から8bytesのデータ。

byte0-1 -> シャッターの一番下の16x16チップの左上8x8タイルに対応するネームテーブルのアドレス(ビッグエンディアン)
byte2   -> 32x32チップ単位でのシャッター画像に上書きするチップの位置
byte3   -> byte2で指定した32x32チップの左上、右上、左下、右下のどこから埋めるかを指定(0,1,2,3)
byte4-6 -> シャッター画像に上書きする16x16チップ番号(下・中・上の順)
byte7   -> ダミーデータ


◇シャッターを閉じる位置
アドレス($03D2C1 + (ステージ番号 * 5))から5bytesのデータ。
byte0-1 -> シャッターの一番上の16x16チップの右上8x8タイルに対応するネームテーブルのアドレス(ビッグエンディアン)
byte2   -> 32x32チップ単位でのシャッター画像で埋めるチップの位置
byte3   -> byte2で指定した32x32チップの左上、右上、左下、右下のどこから埋めるかを指定(0,1,2,3)
byte4   -> シャッター画像の16x16チップ番号


◇シャッターを閉じない部屋
ビッグペッツ・サークリングQ9のボス部屋などシャッターを閉じない部屋番号を指定する。
$3D311-3D320 (10) = ステージ番号: シャッターを閉じない部屋番号


以下、シャッターの設置位置(高さ)に対応する値(毎回計算するのが面倒なので書いておきます)
	シャッター開	シャッター閉
設置位置(上～下)	byte0-1	byte2	byte3	byte0-1	byte2	byte3
0～2	209E	0F	01	2001	00	00
1～3	20DE	0F	03	2041	00	02
2～4	211E	17	01	2081	08	00
3～5	215E	17	03	20C1	08	02
4～6	219E	1F	01	2101	10	00
5～7	21DE	1F	03	2141	10	02
6～8	221E	27	01	2181	18	00
7～9	225E	27	03	21C1	18	02
8～A	229E	2F	01	2201	20	00
9～B	22DE	2F	03	2241	20	02
A～C	231E	37	01	2281	28	00
B～D	235E	37	03	22C1	28	02
C～E	239E	3F	01	2301	30	00

0 目　□　□　□　□　□　□　□　□　□　□　□　□
1 目　目　□　□　□　□　□　□　□　□　□　□　□
2 目　目　目　□　□　□　□　□　□　□　□　□　□
3 □　目　目　目　□　□　□　□　□　□　□　□　□
4 □　□　目　目　目　□　□　□　□　□　□　□　□
5 □　□　□　目　目　目　□　□　□　□　□　□　□
6 □　□　□　□　目　目　目　□　□　□　□　□　□
7 □　□　□　□　□　目　目　目　□　□　□　□　□
8 □　□　□　□　□　□　目　目　目　□　□　□　□
9 □　□　□　□　□　□　□　目　目　目　□　□　□
A □　□　□　□　□　□　□　□　目　目　目　□　□
B □　□　□　□　□　□　□　□　□　目　目　目　□
C □　□　□　□　□　□　□　□　□　□　目　目　目
D □　□　□　□　□　□　□　□　□　□　□　目　目
E □　□　□　□　□　□　□　□　□　□　□　□　目

-------------------------------------------------------------------------

BGパレットアニメーション・BGアニメーションに関する記述です。

◇BGパレットアニメ
$3DC36～3DD10 パレットの定義
3bytesで1組のデータ(73個分のデータ、ただし最初の1個(インデックス0)は読まれないので実質72個)。

byte0-2 -> パレット(透明色は省略)


$3DD31～3DDC5 パレットアニメ定義
可変長のデータ。パレットアニメに使うパレットの総数、次のパレットに切り替わるまでのフレーム数、パレット定義番号と続く。

byte0  -> パレットアニメに使うパレットの総数(00で1個を表すため、実際の個数より1小さい値を指定する)
byte1  -> 次のパレットに切り替わるまでのフレーム数(00で毎フレーム切り替え)
byte2- -> パレット定義番号(byte0で指定した個数分書く。00を指定すると、そこでパレットアニメを終了させる)


$3DD11～3DD30 (20) = BGパレットアニメーション番号: $3DD31を基点としたパレットアニメ定義への1byte相対アドレス


◇BGアニメ(BGバンク切り替えによるアニメーション)
$3DDCB～3DDF7 BGアニメ定義
可変長のデータ。アニメーションに使うBGの総数、次のBGに切り替わるまでのフレーム数、
アニメーションさせるBGバンク指定、BGバンク番号と続く。

byte0  -> アニメーションに使うBGの総数(00で1個を表すため、実際の個数より1小さい値を指定する)
byte1  -> 次のBGに切り替わるまでのフレーム数(00で毎フレーム切り替え)
byte2  -> アニメーションさせるBGバンク指定(00 or 01)
byte3- -> BGバンク番号

$3DDC3～3DDCA (8) = BGアニメーション番号: $3DDCBを基点としたBGアニメ定義への1byte相対アドレス


◇グラビティーマンステージのBGアニメ
$3DF5F-3DF62 BGバンク番号
$3DF63-3DF5D (B) = スクロール番号 : BGアニメタイプ
                   00 -> 普通のアニメーション
                   FF -> 画面のスクロール度合いに依存

------------------------------------------------------------------------

スプライトを用いたグラフィックやアニメーションの定義を行っています。

◇スプライトデータバンク
スプライトデータバンク0 -> BANK12-13 $24010～2800F
スプライトデータバンク1 -> BANK14-15 $28010～2C00F
スプライトデータバンク2 -> BANK16    $2C010～2E00F


以下は、スプライトデータバンク0の場合について記述する(バンク1,2も同様)。

◇スプライトパターン定義アドレス
定義アドレス0
$24010～2410F (100) = スプライトパターン定義番号: スプライトパターン定義アドレス(low)
$24210～2430F (100) = スプライトパターン定義番号: スプライトパターン定義アドレス(high)
定義アドレス1
$24110～2420F (100) = スプライトパターン定義番号: スプライトパターン定義アドレス(low)
$24310～2440F (100) = スプライトパターン定義番号: スプライトパターン定義アドレス(high)


◇スプライトパターン定義
スプライト(8x8タイル)をどのように組み合わせてグラフィックを構成するかを決定する。

byte0 -> スプライトバンク番号
byte1 -> 使用するスプライト(8x8タイル)の総数(00で1個を表すため、実際の個数より1小さい値を入れる)
byte2 -> スプライト配置データ参照番号(下記参照)
byte3 -> 1個目のパターンインデックス番号(bit7-6 -> スプライトバンクのパターンテーブルへの読み込み位置に使われる)
byte4 -> 1個目のスプライトの属性(bit7 -> 上下反転, bit6 -> 左右反転, bit1-0 -> 使用パレット)

byte5 -> 2個目のパターンインデックス番号
byte6 -> 2個目のスプライトの属性
…


◇スプライト配置データのアドレス
$24410～2450F (100) = スプライト配置データ参照番号: スプライト配置データのアドレス(low)
$24510～2460F (100) = スプライト配置データ参照番号: スプライト配置データのアドレス(high)

◇スプライト配置データ
スプライトをどのように配置してグラフィックを構成するかを決定する。

byte0 -> 1個目のスプライトの(相対)Y座標
byte1 -> 1個目のスプライトの(相対)X座標

byte2 -> 2個目のスプライトの(相対)Y座標
byte3 -> 2個目のスプライトの(相対)X座標
…


◇アニメーション定義へのアドレス
$24610～2470F (100) = アニメーション番号: アニメーション定義アドレス(low)
$24710～2480F (100) = アニメーション番号: アニメーション定義アドレス(high) (*)

(*)実際には、BANK12では$247E0～、BANK14では$287C0～、BANK16では$2C730～
   スプライト配置データがあるようなので、そのまま256個分アドレスを置くことはできない(?)

◇アニメーション定義
スプライトパターンを切り替えていくことでアニメーションを表現する。

byte0  -> bit7   -> 0ならスプライトパターン定義アドレス0を参照、1なら定義アドレス1を参照する。
          bit6-0 -> アニメーションに使うスプライトパターンの総数(00で1個を表すため、実際の個数より1小さい値を入れる)
byte1  -> 次のスプライトパターンに切り替わるまでのフレーム数(00で毎フレーム切り替え)
byte2- -> スプライトパターン定義番号(byte0で指定した個数分書く)
          00を指定すると、そこでアニメーションを終了し、オブジェクトを消去する。
          ブーンブロックや敵撃破時の爆発が勝手に消えるのは、ここで00が設定されているため。

-----------------------------------------------------------------------

ンク毎の未使用(と思われる)領域です。プログラムの追加などに活用できると思います。
明らかにプログラムではない範囲に、GNESのデバッガでreadされないか確かめただけなので
間違っていたらゴメンナサイ。

調べたものだけ。

・BANK 00 ($8000-9FFFにマップ)
$83A1～87FF (ROM内アドレス $3B1-80F)

・BANK 06 ($A000-BFFFにマップ)
$A64A～A7FF (ROM内アドレス $C65A-C80F)

・BANK 07 ($A000-BFFFにマップ)
$A60B～A7FF (ROM内アドレス $E61B-E80F)

・BANK 08 ($A000-BFFFにマップ)
$A4E8～A7FF (ROM内アドレス $104F8-1080F)

・BANK 0A ($A000-BFFFにマップ)
$A6D2～A7FF (ROM内アドレス $146E2-1480F)

・BANK 0F (エンディングテキスト,シーンバンク)
$1E589～1E90F

・BANK 10 (シーンバンク)
$20010～2090F

・BANK 11 (シーンバンク)
$22010～22D0F

・BANK 12-13 (スプライトデータバンク0)
・BANK 14-15 (スプライトデータバンク1)
・BANK 16 (スプライトデータバンク2)

・BANK 18-1A (サウンドバンク)

・BANK 1B ($8000-9FFFにマップ)
$9E70～9FFF (ROM内アドレス $37E80-3800F)

・BANK 1C ($8000-9FFFにマップ)
$9F0B～9FFF (ROM内アドレス $39F1B-3A00F)

・BANK 1D ($A000-BFFFにマップ)
$BB4F～BFFF (ROM内アドレス $3BB5F-3C00F)

・BANK 1E-1F ($C000-FFFFにマップ)
$E4A6～E6C6 (ROM内アドレス $3E4B6-3E6D6, デバッグ用コード領域)
$F53E～FDFF (ROM内アドレス $3F54E-3FE0F)

---------------------------------------------------------------------

音楽・効果音関係(間違ってたらゴメンナサイ)


サウンドバンク(NESヘッダ$10バイトを含む)
ロックマン3 : BANK16,17,18($2C010～$3100F, BANK18は前半部分のみ)
ロックマン4 : BANK1E,1F,1D($3C010～$4000F, $3A010～$3C00F, 順序に注意)
ロックマン5 : BANK18,19,1A($30010～$3600F)
ロックマン6 : BANK34,35,36($68010～$6E00F)

以下,サウンドバンクの先頭からのオフセット
$A40 トラック数
$A41～A42 モジュレーション定義の先頭アドレス(ビッグエンディアン)
$A43～ 各トラックの開始アドレス、1トラックあたり2バイト(ビッグエンディアン)

ROM内でのアドレス = サウンドバンク先頭アドレス + (トラックの開始アドレス - $8000)(ロックマン4を除く)




音楽トラック
00で始まり、SQ1,SQ2,TRI,NOIの先頭アドレス(それぞれ2バイト,ビッグエンディアン)が続く。


◆音符データ
ほぼロックマン2と同じ(Y0に20が追加されている)
Y0(20,40,60,80,A0,C0,E0) + XX(00～1F)
Yで音符の長さ(20 -> 40 -> 60 -> … の順に2倍ずつ長くなる)
XXで音の高さ。
XX=00で休符。
0A,0B命令で変更しなければXX = 01がド, 02がド#, 03がレ,…(でいいと思う)
(ノイズはXX=01～10でノイズの種類(00で休符), 値によって出る音がロックマン2とは逆？)

・音長カウンタ(次の音符までの時間)に入る値

音符の長さ  20 40 60 80 A0 C0 E0
---------------------------------
00命令時    02 04 08 10 20 40 80 (テーブル)
通常時      03 06 0C 18 30 60 C0 (テーブル)
02命令時    04 09 12 24 48 90 20 (通常時 + (通常時 >> 1) の値が入る。1byteで管理しているため長さE0を1.5倍すると20になってしまう)


・音長カウンタ(音を鳴らす時間)に入る値

音長カウンタ(次の音符までの時間)の値 * 歯切れの良さ(06命令で指定)の値 / 256
ただし、結果が0になった場合は01が入る。


・1フレーム毎の音長カウンタの減少値

(テンポの値 + 前フレームまで加算してきたテンポの合計(下位8bit)) / 256

例えば、テンポの値(05命令で指定)が$0140ならば、
$0140 + $00 = $0140 -> 下位8bit=$40, 音長カウンタから引く値=1 
$0140 + $40 = $0180 ->          $80,                        1
$0140 + $80 = $01C0 ->          $C0,                        1
$0140 + $C0 = $0200 ->          $00,                        2
$0140 + $00 = $0140 ->          $40,                        1 
 ・
 ・
 ・
のようになる。
音長カウンタ(音を鳴らす時間)が0以下になると、音のフェードアウトが始まる。
音長カウンタ(次の音符までの時間)が0以下になると、次の音符の処理を行う。


◆命令表
00 … 00～00の範囲の音の長さを少し短くする(2/3) (トグル)(*)
01 … 01～01の範囲(とその次の音)をタイでつなぐ？(例えば、01 A1 01 A1なら2個のA1がつながれる) (トグル)(*)
02 … 次の音の長さを1.5倍にする
03 … 03～03の範囲を2オクターブ上げる (トグル)(*)

04 XX ジャンプ命令の飛び先にやたらに置かれている(トグル命令をまたいでジャンプしなければ置かなくても実害無し？)
   +08 -> 03命令を開始・継続する効果(加算しなければ03命令を終了)
   +20 -> 00命令を開始・継続する効果(加算しなければ00命令を終了)
   +40 -> 01命令を開始・継続する効果(加算しなければ01命令を終了)
   XX = 00で全トグル命令終了

(*)トグル命令00,01,03は、実行の度に効果のON・OFFが切り替わる。
   04命令は各トグル命令のON・OFFを強制的に設定できる。

05 XX YY … 全体のテンポの設定(ビッグエンディアン, 大きい程速い。SQ1に置く)
06 XX … 歯切れのよさ(クオンタイズ？)
07 XX … チャンネルの最大音量(TRIは設定不可)
08 XX … モジュレーション定義読み込み(読み込まないと音が出ないので全チャンネル必須)
09 XX … オクターブ指定(00～07)
0A XX … トラックの基本となるキーの高さ(符号付き1バイト整数, SQ1に置く)
0B XX … そのチャンネルの基本となるキーの高さ(符号付き1バイト整数)
0C XX … ピッチの調節(符号付き1バイト整数, 負数だと高くなり、正数だと低くなる)
0D XX … 直前の音の高さから今鳴らすべき音の高さの方向にピッチが変わっていく？(ピッチベンド？00で無効)

0E ZZ XX YY … アドレスXXYYへジャンプ(ZZ回ループ、0だとループしない)(*)
0F ZZ XX YY … 〃
10 ZZ XX YY … 〃
11 ZZ XX YY … 〃

(*)参照するループカウンタが各チャンネル・命令毎に異なるので、多重ループを実現できる。

12 ZZ XX YY … 命令0Eのループカウンタが1になっていればアドレスXXYYへジャンプ(ジャンプの際に命令"04 ZZ"を実行し、トグル命令のON・OFFを設定する)(*)
13 ZZ XX YY … 〃  0F
14 ZZ XX YY … 〃  10
15 ZZ XX YY … 〃  11
16 XX YY … アドレスXXYYへジャンプ(主に曲の無限ループに使われている)  
17 … 終了命令(チャンネル毎に置き忘れないように)
18 XX … 音色指定(00,40,80,C0) (ロックマン2と違いこの命令でノイズの指定はできない？ノイズの音色はモジュレーション定義で指定)

(*)命令0E～11のジャンプ条件が満たされない場合にジャンプする。
  例えば、

L1:
 ・
 ・
 ・
0E 03 L1

  の場合、命令0Eでのジャンプは3回となり、ラベルL1～命令0E間は計4回繰り返されることになる。
  ここで、命令12を途中に挟むと、

L1:
 ・
 ・
12 00 L2
 ・
 ・
0E 03 L1
L2:

  4回目の繰り返しの途中で命令12を通った時に、ラベルL2にジャンプすることになる。



◆モジュレーション定義(なんかモジュレーション以外もいろいろ定義してる気がしますが)
8バイトで1個のデータ

byte0 … 音のフェードインの速さ(1Fで最初から最大)(00～1F)
byte1 … 最大音量になった後、最小音量に向かう速さ(ただし、00を指定すると即座に最小音量になる)(00～1F)
byte2 … 最小音量(X0の形)(0～F)
byte3 … 音のフェードアウトの速さ(音長カウンタ(音を鳴らす時間)が0以下になった時がフェードアウト開始。1Fで即座に音量0まで下がる)(00～1F)


byte4 … ピッチ・音量の変化の速さ(大きい程単位時間当たりの変位回数が増える)
         bit7   -> 1音毎に変化周期カウンタをリセットするか
         bit6-0 -> 変化周期カウンタに加算する値

byte5 … ピッチの最大変位(00～7F)
byte6 … 音量の最大変位(00～7F)

byte7 … ノイズの音色指定(00 or 80)


効果音
先頭バイトは効果音上書き優先順位。
それ以降は、
[制御命令] [使用するチャンネル分だけ出力命令] [制御命令] … と続く。


◆制御命令

00 XX YY … XX -> 次の音までの時間
            YY -> 使用チャンネル(+01 -> 矩形波1 +02 -> 矩形波2 +04 -> 三角波 +08 -> ノイズ)

01 ZZ XX YY WW VV … $XXYYにジャンプ(ZZ回繰り返し,ZZ=$00なら無限回。その後,制御命令"00 WW VV"を実行)

02 XX YY ZZ … XX -> 歯切れの良さ(クオンタイズ？)
               YY -> 次の音までの時間
               ZZ -> 使用チャンネル(+01 -> 矩形波1 +02 -> 矩形波2 +04 -> 三角波 +08 -> ノイズ)

03 ZZ XX YY WW VV UU … $XXYYにジャンプ(ZZ回繰り返し,ZZ=$00なら無限回。その後,制御命令"02 WW VV UU"を実行)

06 XX YY ZZ WW … XX -> 歯切れの良さ
                  YY -> 全トラックの基本となるキーの高さ
                  ZZ -> 次の音までの時間
                  WW -> 使用チャンネル(+01 -> 矩形波1 +02 -> 矩形波2 +04 -> 三角波 +08 -> ノイズ)

FF … 終了


◆出力命令
[オペランドの指定(1バイト)] [オペランド(可変長)] [音の高さ(1バイト)]の構成。

オペランドの指定
000X XXXX
   | ||||
   | |||+--- モジュレーション定義呼び出し(音楽トラックと同じ)
   | ||+---- 音色指定(00,40,80,C0)
   | |+----- 音量(00～0F)
   | +------ ピッチエンベロープ(最上位bitが符号で下位7bitは絶対値？負数だと高くなり、正数だと低くなる)
   +-------- ピッチ調節

オペランドの並び順は下位bitのものから。設定し直す必要のない項目は省略可能。
音の高さは80～FFを指定することで新しく値を設定し直さない(前の音の終わりの状態を引き継ぐ)。

------------------------------------------------------
過去の痕跡

00 XX … XX -> 音の高さ

01 XX YY … XX -> モジュレーション定義呼び出し
            YY -> 音の高さ

02 XX YY

03 ????? (未使用)

04 XX YY … XX -> 音量
            YY -> 音の高さ

05 XX YY ZZ … XX -> モジュレーション定義呼び出し
               YY -> 音量
               ZZ -> 音の高さ

06 XX YY ZZ
07 XX YY ZZ WW

08 XX YY … XX -> ピッチエンベロープ
            YY -> 音の高さ

09 XX YY ZZ

0A ????? (未使用)

0B XX YY ZZ WW

0C XX YY ZZ

0D XX YY ZZ WW … XX -> モジュレーション定義呼び出し
                  YY -> 音量
                  ZZ -> ピッチエンベロープ？
                  WW -> 音の高さ

0E ????? (未使用)
0F XX YY ZZ WW VV … XX -> モジュレーション定義呼び出し
                     YY -> 音色指定($00,$40,$80,$C0)
                     ZZ -> 音量($00～$0F？)
                     WW -> ピッチエンベロープ？正の値なら音が低くなり負の値なら高くなる(00で変化なし)
                     VV -> 音の高さ

10 XX YY
11 ?????? (未使用)
12 ?????? (未使用)
13 ?????? (未使用)
14 XX YY ZZ
15 XX YY ZZ WW
16 ?????? (未使用)
17 XX YY ZZ WW VV
18 XX YY ZZ
19 XX YY ZZ WW
1A ?????? (未使用)
1B ?????? (未使用)
1C ?????? (未使用)
1D XX YY ZZ WW VV
1E ??????
1F XX YY ZZ WW VV UU … XX -> モジュレーション定義呼び出し
                        YY -> 音色指定
                        ZZ -> 音量
                        WW -> ピッチエンベロープ
                        VV -> ピッチ
                        UU -> 音の高さ

------------------------------------------------------



資料作成にあたって、ゲイムのお部屋さまの音楽関係資料が大変参考になりました。
貴重な資料の公開に感謝します。

---------------------------------------------------------------------------

オブジェクトの状態を管理するメモリのデータです。

オブジェクトメモリは、オブジェクトの状態を管理するメモリ領域でありRAMの$300～5CFを指す。
各項目毎に$00～17の24個分の領域が用意されている。
このうちインデックス0はロックマンの状態が入っており、$01～07は特殊武器等に使われる。
通常のオブジェクトに対しては$08～17を使用する。

以下、Data Crystalの RAM mapを元にした項目リスト。

0300-0317 ObjectID

0318-032F X座標(fraction(小数部))
0330-0347 X座標(low)
0348-035F X座標(high) (部屋番号を表す)

0360-0377 Y座標(fraction(小数部))
0378-038F Y座標(low)
0390-03A7 Y座標(high) (*)
 (*)これは上下にスクロールすると増減するものではなく、ジャンプなどでロックマン等のオブジェクトが画面外へ
    出たような場合の判定のために使われている。

03A8-03BF X方向速度(low)
03C0-03D7 X方向速度(high)
03D8-03EF Y方向速度(low)
03F0-0407 Y方向速度(high)
 ここに値を設定しただけではオブジェクトは移動しない。
 通常、移動用のサブルーチンを呼び出すことで移動を行う。
 移動用のサブルーチンでは、速度のlow,highはそれぞれ座標のfraction,lowに加減算される。

0408-041F Type Bits
　bit7 -> ロックマンに対して当たり判定あり(そのオブジェクトに触れるとダメージを受ける)
　bit6 -> 武器に対して当たり判定あり
　bit5-0 -> 当たり判定の大きさ(参照番号、$00～3F)

0420-0437 方向
　bit3 -> 上
　bit2 -> 下
　bit1 -> 左
　bit0 -> 右


0438-044F Sprite Number(設置型オブジェクトの場合、自身が何番目の設置型オブジェクトかが格納される)

0450-0467 HP

0468-047F 変数A
0480-0497 変数B
0498-04AF 変数C
04B0-04C7 変数D
04C8-04DF 変数E
04E0-04F7 変数F
04F8-050F 変数G
0510-0527 変数H(設置型オブジェクトの場合、自身のEnemyIDが格納されている)
 これらの領域を使用することでオブジェクト固有の情報を格納しておくことが可能。

0528-053F Display flags
　bit7 -> ？
　bit6 -> グラフィックを上下反転させる
　bit5 -> グラフィックを左右反転させる
　bit4 -> 背景に隠れる
　bit3 -> 画面外に出たときそのオブジェクトを破壊しない
　bit2 -> 不可視
　bit1 -> ブロックになる
　bit0 -> 足場になる

0540-0557 アニメーションフレーム
0558-056F アニメーション番号
0570-0587 アニメーションタイマー

0588-059F Enemy Handler(low)
05A0-05B7 Enemy Handler(high)

05B8-05CF Flash Counter(点滅時間)

-----------------------------------------------------------------------------------

各オブジェクトの動作やグラフィックに関係のあるテーブルです。

・$386D3～387D2 (100) = ObjectID: Enemy Handler呼び出し時に$A000～BFFFにマップするバンク
Enemy Handler(オブジェクトの動作を定義したルーチンのアドレス)を呼び出し時に、
ここで指定した番号のバンクが$A000～BFFFにマップされる。
なお、Enemy Handler呼び出し時に$8000～9FFFにはバンク1Cがマップされている。


・$387D3～388D2 (100) = ObjectID: オブジェクト撃破時の演出指定(ObjectIDで指定)
オブジェクトを撃破した時、そのオブジェクトのObjectIDはここで指定した番号に変更される。
ただし、00を指定した場合は通常の爆発エフェクトとなる。
主にボス撃破の演出に使われている。


・$388D3～389A2 (D0) = ObjectID: デフォルトのEnemy Handler(low)
・$389A3～38A72 (D0) = ObjectID: デフォルトのEnemy Handler(high)
Enemy Handlerとはオブジェクトの動作を定義したルーチンのアドレスを指す。
オブジェクトメモリ内のEnemy Handler(high)の値が$80未満の場合、
無効なアドレスと判断され、このテーブルの値がオブジェクトのEnemy Handlerにセットされる。


・$3E34B～3E44A (100) = ObjectID: 参照するスプライトデータバンク(12,14,16)
オブジェクトのグラフィックに深く関係する。
たとえアニメーション番号が同じでも、参照するバンクが異なればグラフィックは当然違ったものになる。

-----------------------------------------------------------------

オブジェクトの動作等を記述するためによく使われるサブルーチンです。
改造時のメモを見ながら書いているので、細かい処理内容が抜けていたり間違っている可能性 もあります。
オブジェクトX,オブジェクトYという表記は、 それぞれX,Yレジスタにインデックスが格納されているオブジェクトのことを指します。
ここからBANK1Cのサブルーチン
jsr $84FC	オブジェクトXのグラフィックの向きを変えずにX,Y方向へ移動する。
オブジェクトXの方向にX,Y方向速度だけ移動させる。 ここで、このサブルーチン呼び出しの前後でオブジェクトXのDisplay Flagsの値は変わらない。
jsr $850B	オブジェクトXのグラフィックのみロックマンのほうを向く。
オブジェクトXのグラフィックがロックマンの方)を向くようにDisplay flagsのbit5の値がセットされる。 ここで、このサブルーチン呼び出しの前後でオブジェクトXの方向($420,x)の値は変わらない。
jsr $851A	オブジェクトXが向いている方向に(グラフィックの向きを変えずに)ブロックにめり込まないようにX方向速度だけ移動する。
基本的にはサブルーチン$EA3Fと同じ。 ただし、このサブルーチン呼び出しの前後でオブジェクトXのDisplay Flagsの値は変わらない。
jsr $8541	オブジェクトXが向いている方向にグラフィックの向きを変えずにX方向速度だけ移動する。
基本的にはサブルーチン$EA65と同じ。 ただし、このサブルーチン呼び出しの前後でオブジェクトXのDisplay Flagsの値は変わらない。

jsr $8526	オブジェクトXのグラフィックを左向きにする。
オブジェクトXのDisplay Flagsのbit5を0にする。
jsr $852F	オブジェクトXの方向を左右反転する。
オブジェクトXの方向(右向き01,左向き02)を反転させる。
jsr $8538	オブジェクトXの方向を上下反転する。
オブジェクトXの方向(下向き04,上向き08)を反転させる。

jsr $854D	放物線を描くようにオブジェクトXのX,Y方向速度をセットする。
Yレジスタに値(00または01)をセットして呼び出す。 オブジェクトXが放物線を描き、概ねロックマンのいるX座標に着地するようにX,Y方向速度をセットする(あまり正確な値はセットされない)。 ここで、Y方向速度は符号付き整数であり、Yレジスタの値が00で小ジャンプ、01で大ジャンプとなる。
jsr $8550	放物線を描くようにオブジェクトXのX,Y方向速度をセットする。
AレジスタにX方向距離、Yレジスタに値(00または01)をセットして呼び出す。 他はサブルーチン$854Dと同じ。
jsr $8592	放物線を描くようにオブジェクトXのX,Y方向速度をセットする。
$01にX方向距離、Yレジスタに値(00～03)をセットして呼び出す。 オブジェクトXが放物線を描き、X方向距離が$01離れた位置に着地するようにX,Y方向速度をセットする(上記のサブルーチンよりも正確)。 ここで、Y方向速度は符号付き整数であり、Yレジスタの値でジャンプの高さが決まる(01＞03＞00＞02の順に高い)。


ここからBNAK1E-1Fのサブルーチン
jsr $E8DE	オブジェクトXのグラフィックを右向きにし、右に移動する。
オブジェクトXのDisplay Flagsのbit5を1にし、X座標にX方向速度を加算する。
jsr $E8E6	オブジェクトXを右に移動する。
オブジェクトXのX座標にX方向速度を加算する。
jsr $E904	オブジェクトXのグラフィックを左向きにし、左に移動する。
オブジェクトXのDisplay Flagsのbit5を0にし、X座標からX方向速度を減算する。
jsr $E90C	オブジェクトXを左に移動する。
オブジェクトXのX座標からX方向速度を減算する。

jsr $E979	オブジェクトXを下に移動する。
オブジェクトXのY座標にY方向速度を減算する。
このサブルーチンでは、Y方向速度は符号付き整数として扱われる(負の値が下方向)。
jsr $E94A	オブジェクトXを上に移動する。
オブジェクトXのY座標からY方向速度を減算する。
このサブルーチンでは、Y方向速度は符号付き整数として扱われる(正の値が上方向)。
jsr $E968	オブジェクトXをY方向速度だけ移動させる(速度に重力加算有り)。
オブジェクトXをY方向速度だけ移動させる。
このサブルーチンでは、Y方向速度は符号付き整数として扱われる(正の値が上方向)。
また、速度から重力値が減算される。

jsr $E92A	オブジェクトXを下に移動する。
オブジェクトXのY座標からY方向速度を加算する。
jsr $E999	オブジェクトXを上に移動する。
オブジェクトXのY座標からY方向速度を減算する。
(実際のプログラムコードはサブルーチン$E94Aと全く同じもの)

jsr $EA1E	オブジェクトXのY方向速度をFF.00にセットする。
オブジェクトXのY方向速度(low,high)に00,FFをセットする。
jsr $EA29	オブジェクトXのY方向速度を01.00にセットする。
オブジェクトXのY方向速度(low,high)に00,01をセットする。
jsr $EA34	オブジェクトXのY方向速度をFF.C0にセットする。
オブジェクトXのY方向速度(low,high)にC0,FFをセットする。

jsr $E7B7	オブジェクトXをブロックにめり込まないようにY方向速度だけ移動させる(速度に重力加算有り)。
Yレジスタに適切な値をセットして呼び出す(実際に使用している箇所を参照してみて下さい)。
オブジェクトXをY方向速度だけブロックにめり込まないように移動させる。
このサブルーチンでは、Y方向速度は符号付き整数として扱われる(正の値が上方向)。 また、速度から重力値が減算される。
ブロックと接触した場合、キャリーフラグがセットされる。
jsr $EA3F	オブジェクトXが向いている方向にブロックにめり込まないようにX方向速度だけ移動する。
Yレジスタに適切な値をセットして呼び出す(実際に使用している箇所を参照してみて下さい)。
オブジェクトXの方向(右向き01,左向き02)にX方向速度だけブロックにめり込まないように移動させる。
また、オブジェクトXの方向が右ならば、Display Flagsのbit5を1、左ならば0にする。
ブロックと接触した場合、キャリーフラグがセットされる。
jsr $EA52	オブジェクトXが向いている方向にブロックにめり込まないようにY方向速度だけ移動する。
Yレジスタに適切な値をセットして呼び出す(実際に使用している箇所を参照してみて下さい)。
オブジェクトXの方向(下向き04,上向き08)にY方向速度だけブロックにめり込まないように移動させる。
ブロックと接触した場合、キャリーフラグがセットされる。

jsr $EA65	オブジェクトXが向いている方向にX方向速度だけ移動する。
オブジェクトXの方向(右向き01,左向き02)にX方向速度だけ移動させる。 また、オブジェクトXの方向が右ならば、Display Flagsのbit5を1、左ならば0にする。
jsr $EA86	オブジェクトXが向いている方向にY方向速度だけ移動する。
オブジェクトXの方向(下向き04,上向き08)にY方向速度だけ移動させる。

jsr $EA98	オブジェクトXのアニメーション番号をセットする。
Aレジスタにアニメーション番号をセットして呼び出す。
指定した値をオブジェクトXのアニメーション番号にセットし、 アニメーションフレーム・アニメーションタイマーを0クリアする。
jsr $EAA4	オブジェクトYのアニメーション番号をセット・X→Yに座標をコピーする。
Aレジスタにアニメーション番号をセットして呼び出す。
指定した値をオブジェクトYのアニメーション番号にセットし、 アニメーションフレーム・アニメーションタイマーを0クリアする。
また、オブジェクトXの座標(low,high)をオブジェクトYの座標にコピーし、オブジェクトYの以下のパラメータを0クリアする。

X座標(fraction)
Y座標(fraction)
Flash Counter
変数A～H

jsr $EAE9	オブジェクトYのアニメーション番号をセットする。
Aレジスタにアニメーション番号をセットして呼び出す。
指定した値をオブジェクトYのアニメーション番号にセットし、 アニメーションフレーム・アニメーションタイマーを0クリアする。
jsr $EAF5	オブジェクトYのアニメーション番号をセット・(Xの座標＋相対座標)をYの座標にセットする。
Aレジスタにアニメーション番号、$10に相対座標番号をセットして呼び出す。
指定した値をオブジェクトYのアニメーション番号にセットし、 アニメーションフレーム・アニメーションタイマーを0クリアする。
また、オブジェクトXの座標(low,high)に相対座標を加えた座標をオブジェクトYの座標にセットする。
相対座標は符号付整数として扱われ、値は以下のテーブルで定義されている。

$3EB72-3EBCB (5A) = 相対座標番号 : 相対X座標(low)
$3EBCC-3EC25 (5A) = 相対座標番号 : 相対Y座標(low)

さらにオブジェクトYの以下のパラメータを0クリアする。

X座標(fraction)
Y座標(fraction)
Flash Counter
変数A～H


jsr $EC16	オブジェクトXの方向をロックマンの方を向くようにセットする。
オブジェクトXとロックマンのX座標を比較し、 オブジェクトXの方が左にいれば01(右)、そうでなければ02(左)がオブジェクトXの方向にセットされる。
jsr $EC30	オブジェクトXの方向(左右)をグラフィックに反映する。
オブジェクトXの方向が右ならば、Display Flagsのbit5を1、左ならば0にする。
jsr $EC4A	オブジェクトXの方向を左右反転させる(グラフィック含む)。
オブジェクトXの方向の下位2bitを反転させる。 また、Display Flagsのbit5も反転させる。

jsr $EC5B	曲を再生する。
Aレジスタにトラック番号をセットして呼び出す。
そのトラック番号の曲が再生される。$F0を指定すると曲を停止する。
jsr $EC5D	効果音を再生する。
Aレジスタにトラック番号をセットして呼び出す。
そのトラック番号の効果音が再生される。

jsr $EC76	ロックマンとオブジェクトXのY座標を比較する。
AレジスタにロックマンとオブジェクトXのY方向距離が格納される。

ロックマンのY座標 ≧ オブジェクトXのY座標

ならば、キャリーフラグがセットされる。
jsr $EC94	ロックマンとオブジェクトXのX座標を比較する。
AレジスタにロックマンとオブジェクトXのX方向距離が格納される。

ロックマンのX座標 ≧ オブジェクトXのX座標

ならば、キャリーフラグがセットされる。

jsr $ECC2	オブジェクトXからのロックマンの方角を取得する。
オブジェクトXから見たロックマンの方角がAレジスタに格納される。 格納される値は時計回りで、

00 北
01 北北東
02 北東
…
0F 北北西

の16通り。
jsr $ECC4	オブジェクトXからのオブジェクトYの方角を取得する。
オブジェクトXから見たオブジェクトYの方角がAレジスタに格納される。 格納される値は上記を参照。
jsr $F470	方角からオブジェクトXの方向・速度をセットする。
Aレジスタに速さ指定、Yレジスタに方角($00～0F、上記を参照)をセットして呼び出す。
指定した方角に進むようにオブジェクトXの方向・速度がセットされる。 Aレジスタに指定する値は以下の10通り。値の右側の数値は目安の速さ(16進数)。

00 -> 00.40　　08 -> 02.00
10 -> 04.00　　18 -> 01.99
20 -> 01.00　　28 -> 03.00
30 -> 05.00　　38 -> 00.80
40 -> 02.80　　48 -> 08.00

上記のサブルーチンと組み合わせて使うことでホーミングする弾などを実現できる。

jsr $EF87	オブジェクトXとロックマンの接触判定を行う。
オブジェクトXとロックマンが接触しているかを判定する。 接触していた場合、キャリーフラグがクリアされる。
jsr $EFF8	オブジェクトXと武器の接触判定を行う。
オブジェクトXとインデックス$01～03のオブジェクト(ロックバスターや各種特殊武器)が接触しているかを判定する。 接触していた場合、キャリーフラグがクリアされ、Yレジスタと$10に接触したオブジェクトのインデックスが格納される。

jsr $F15F	オブジェクトメモリ領域を確保する(Xレジスタ)。
Xレジスタに空いているオブジェクトメモリ領域のインデックスが格納される($08～17)。 確保できなかった場合はキャリーフラグがセットされる。 このサブルーチン呼び出し後はキャリーフラグのチェックを忘れずに。
jsr $F16F	オブジェクトメモリ領域を確保する(Yレジスタ)。
Yレジスタに空いているオブジェクトメモリ領域のインデックスが格納される($08～17)。 確保できなかった場合はキャリーフラグがセットされる。 このサブルーチン呼び出し後はキャリーフラグのチェックを忘れずに。

jsr $F207	割り算 $00 / $01 を行う。
1byteの値同士の割り算 $00 / $01 を行う。商は$02、余りは$03に格納される。
jsr $F22D	割り算 $00-01 / $02-03 を行う。
2bytesの値同士の割り算 $00-01 / $02-03 を行う(リトルエンディアン)。 ここで、$00,$02は整数部、$01,$03は小数部である。 商は$04-05に格納される。ここで、$05は整数部、$04は小数部である。 このサブルーチンでは、演算結果が$100(=256)以上となる場合、正常な結果が返らないことに注意。

jsr $F297	アイテム回収フラグをセットする。
オブジェクトXに対して回収フラグをセットする。 回収フラグがセットされた設置型オブジェクトは出現しなくなる。

jsr $F2C4	インデックスXのオブジェクトを消去する。
オブジェクトXをオブジェクトメモリから消去する。
jsr $F2FE	インデックスYのオブジェクトを消去する。
オブジェクトYをオブジェクトメモリから消去する。

jsr $FF3D	プログラムバンクを連番で切り替える。
Aレジスタにバンク番号をセットして呼び出す。
$8000-9FFFにバンク[Aレジスタの値]、$A000-BFFFにバンク[Aレジスタの値 + 1]をマップする。
jsr $FF43	プログラムバンクを切り替える。
$F5に$8000-9FFF、$F6に$A000-BFFFにマップしたいバンク番号をセットして呼び出す。
片方のみ切り替えたい場合は、切り替える方のバンク番号のみをセットすればよい。 

-----------------------------------------------------------------------------

ロックマン5のスレッドに関する記述です。

ロックマン5では、ステージやパレットアニメーションの処理等をスレッドで管理している。

$80-8F スレッドの状態管理
4bytesで1組。0～3の4つまでのスレッドの状態を管理できる。

byte0   -> スレッドの状態
byte1   -> スレッドのスリープタイマー
byte2-3 -> スレッドの状態が休止中ならばbyte2にスレッドのスタックポインタが格納される。
           新規登録されたスレッドならばbyte2-3にスレッドハンドラのアドレスが格納される。


スレッドの状態
00	未使用
01	休止状態のスレッド。NMIの度にスリープタイマーがデクリメントされ、0になったときに実行可能状態(04)へ遷移する。
02	実行中のスレッド。スレッド休止ルーチン($FF22,$FF24)を呼び出すことで休止状態(01)へ遷移する。
04	実行可能なスレッド。実行時に実行状態(02)へ遷移する。
08	新規登録されたスレッド。実行可能でもある。実行時に実行状態(02)へ遷移し、スレッドハンドラへジャンプする。

スレッド関係のサブルーチン
jsr $FF22	実行中のスレッドを休止する。
スリープタイマーに#$01をセットしてスレッドを休止状態にする(つまり、次のNMIが終了するまで待つ)。
その後、スレッドの状態監視ループに入り、実行可能なスレッドが見つかればそのスレッドを実行する。
jsr $FF24	実行中のスレッドを休止する。
Aレジスタの値をスリープタイマーにセットしてスレッドを休止状態にする。
その後は同上。
スリープタイマーは、デクリメント後に0かどうかのチェックが行われるため、Aレジスタに#$00をセットして 呼び出した場合256回NMIの終了を待つことになる。
jsr $FEF3	スレッドを新規登録する。
$93-94にスレッドハンドラのアドレス、 Aレジスタにスレッドの状態管理に使用するスロット(0～3)をセットして呼び出す。
jsr $FF03	スレッドを終了する。
Aレジスタで指定した番号(0～3)のスレッドを終了する(スレッドの状態に00を格納する)。
jmp $FF0B	実行中のスレッドを終了する。
実行中のスレッドを終了し、スレッドの状態監視ループに入る。 

----------------------------------------------------------------------------

特に分類なしのデータなど


◇クリアしたステージでボス出現
例えば、
$142ED: 25 → A9
$142EE: 6E → 00

◇はしごを昇降する速度
  ・はしご頂上から降りてきたとき
  $3617E 速度(low)
  $36183 速度(high)

  ・はしごにつかまったとき
  $3764A 速度(low)
  $3764F 速度(high)

◇ノックバック・無敵時間
$36476 ノックバック速度(low)
$3647B ノックバック速度(high)
$36499 ノックバック方向と逆方向に十字キーを入力した時のノックバック速度(low) (highの指定なし)

$364D7 ノックバック時間(アニメーションフレームの値で指定するため09が上限)
$364DB ノックバック終了からの無敵時間

◇ロックバスターの速度
通常のバスター, 中途半端なチャージ, チャージショットの順
$375AA-375AC 速度(low)
$375AD-375AF 速度(high)

◇ベルトコンベアの速度
$3768D 速度(low)
$37691 速度(high)

◇ロックバスターの攻撃力
$38115 ロックバスター・中途半端なチャージ
$38119 チャージショット
$3820C 敵を倒したとき、チャージショットが貫通しないHPの下限

  ・ロックバスターの攻撃力を敵毎に指定
  例えば、
  $38110-38115 : 48 A5 5B C9 0E 68
  で、ロックバスター・中途半端なチャージの攻撃力が$810-90Fで
  指定可能になる…ハズ(チャージショットは無関係)

  ・ロックバスターとチャージショットの攻撃力を敵毎に独立に指定
  例えば、
  $3810B-3811A : A5 5B C9 0E 90 0B A9 0D 85 F6 20 43 FF 4C 0C 81
  で、ロックバスター・中途半端なチャージの攻撃力が$810-90F、
  チャージショットの攻撃力が$1A810-1A90Fで指定可能になる。

◇ 各ステージの音楽トラック番号
$3D4E2-3D4F1 (10) = ステージ番号 : トラック番号

◇ライフゲージのX座標
$3E2F4-3E2F6 ライフゲージ, 武器ゲージ, ボスゲージの順


◇敵の無敵時間
$38199 ザコ敵の無敵時間
$381AB ボスの無敵時間

--------------------------------------------------

グラビティーマンステージの仕掛け


◇BGアニメーション
こちらを参照。


◇ボス部屋での重力反転処理
ボス部屋に入ると、直前の重力反転の有無に関係なく強制的に重力反転状態となる。
これを無効にするには、例えば
$142C7 : A5 -> A9
とすればよい。

-------------------------------------------------------

ウェーブマンステージの仕掛け


◇上昇する泡
マップに泡生成オブジェクト(EnemyID:4A)を設置して利用する。

・$A370-A374 (5) 生成される泡のアニメーション番号(63 -> 大きな泡, 65 -> 小さな泡、ここを変更したら下のSprite flags, Enemy handlerも一緒に変更すべき)
・$A375-A379 (5) 生成される泡のX座標 (Y座標は泡生成オブジェクトのY座標がコピーされるため指定無し)
・$A37A-A37E (5) 生成される泡のSprite flags
・$A37F-A383 (5) 生成される泡のEnemy handler(low)
・$A384-A388 (5) 生成される泡のEnemy handler(high)

・$A389-A38B (3) 部屋番号毎の泡生成順序


・泡生成オブジェクトを設置する最初の部屋番号
$A2FDに($79 - 部屋番号)で指定する。(例えば、部屋番号08に設置するなら$79 - $08 = $71を指定)
$A34Eに部屋番号で指定する。ここで指定した部屋番号で生成される大きな泡は膨らむアニメーション有り。


・$A303 最初の泡が生成されるまでのフレーム数
・$A368 泡の生成時間間隔(フレーム数で指定)


・泡の上昇速度
$A23C 大きな泡(low)
$A241 大きな泡(high)
$A2A8 小さな泡(low)
$A2AD 小さな泡(high)

・$A2E3 小さな泡に乗ってから割れるまでのフレーム数



◇水上バイク地帯
・3C9F0 強制スクロールを行うステージ番号

・強制スクロール＆ラスタースクロールを行うスクロール番号
$3C9F8 1個目
$3C9FC 2個目

・強制スクロールの速度
$3CA18 ロックマンのX座標に加算する値(強制スクロール速度と合わせておくのが無難)
$3CA3B 強制スクロール速度

・強制スクロール終了部屋番号
$3CA2D 1個目
$3CA31 2個目

・$3645C 水上バイクから降りる部屋番号
・$36464 降りる直前の水上バイクの速度(low)
・$36469 降りる直前の水上バイクの速度(high)
・$36757 水上バイクから降りた後、自動で歩くのをやめる部屋番号

----------------------------------------------

ストーンマンステージの仕掛け


◇壊せるブロック

・$3B0F1-3B100 (10) ステージ番号 : 壊せるブロックの種類(*)

(*)壊せるブロックの種類
00 -> 無効
01 -> ストーンマンステージタイプ(破壊情報が保持される)
02 -> ワイリーステージ1タイプ(スクロール毎に破壊情報がリセットされる)(**)
03 -> ブルースステージ4タイプ

・$3B0BD-3B0F0 ストーンマンステージタイプのブロック破壊データ
4bytesで1組のデータ。1組でブロック1個の情報を定義する。
ここを設定しないと、チップ属性3xのチップをロックバスターで撃ってもエフェクトのみで破壊されない。
また、ここで設定してもその位置にチップ属性3xのチップが無ければ破壊されない。

byte0 -> ブロックのある部屋番号
byte1 -> 32x32チップ単位でのブロックの位置(00-3F)
byte2 -> その32x32チップ内でのブロックの位置(左上 -> 00, 右上 -> 01, 左下 -> 02, 右下 -> 03)
byte3 -> 破壊後の16x16チップ番号


(**)ワイリーステージ1タイプの破壊できるブロック
ワイリーステージ1タイプでは、設定は特に必要ない。(破壊後の16x16チップ番号は00)
簡単に設置できるが破壊情報の保持は2画面分(偶数部屋番号と奇数部屋番号)しか持たず、スクロール(エリア間移動の意味)しないと
破壊情報はリセットされないため、3画面以上の横長のエリアに設置されたブロックを破壊するとちょっとおかしなことになる。
(ワイリーステージ1では画面のスクロール度合いに応じて破壊情報をクリアする処理が実行されている)

-------------------------------------------------------------------------

ジャイロマンステージの仕掛け


◇落下するブロック
・$377F5 使用するステージ番号
正確にステージ番号とするならついでに
377F3 : 27 -> 26
と変えた方が良いかも。


・$3782E 生成したブロックのY座標
チップ属性3xのブロックに乗った際にブロックオブジェクトが生成されるが、そのオブジェクトのY座標はここで固定されている。
そのため、マップ作成で落下ブロックをどの高さに配置しても落下するブロックオブジェクトの生成位置は変わらない。
以下、ブロックの配置位置を考慮するようなコードを例示する。

$3782D-3782F : 4C F4 9F
$38004-3800F : A5 11 29 F0 09 08 99 78 03 4C 22 98

<!--
BANK 1B
981D:
4C F4 9F jmp $9FF4

9FF4:(BANK 1Bは$9E70-9FFFが(多分)未使用)
A5 11    lda $11
29 F0    and #$F0
09 08    ora #$08
99 78 03 sta $0378,y
4C 22 98 jmp $9822
-->

ブロックオブジェクトは落下してもX座標が画面外に出るまでは消えないので、1画面中に落下ブロックを配置し過ぎると
オブジェクトメモリを圧迫し他のオブジェクトが出現しない・ブロックが落下しない等の影響が出る可能性があるので注意した方がいいです。


・$37838 ブロックが落下するまでのフレーム数


◇エレベーター(ステージ後半)
・elevator border非表示
$3DF76 : A5 -> A9
$3DF77 : 74 -> 00

・$A113 エレベーターの土台が描かれた部屋番号
・$A143 エレベーターオブジェクトを設置した部屋番号+1を指定
・$A156 エレベーターの上昇速度

・$A16D エレベーター上昇後のマップが描かれた部屋番号
・$A171 エレベーター上昇後の次の部屋番号
・$A17F エレベーター上昇後にセットするArea number(*)
・$A187 エレベーター上昇後にセットする部屋番号

・$377DF-377EE (10) = ステージ番号 : ステージ毎の圧死判定の有無(00で無効, FFで有効)
・$3D0DC-3D0EB (10) = ステージ番号 : エレベータを設置した部屋のArea number(*)
・$3D0EC-3D0FB (10) = ステージ番号 : 上昇後の次の部屋番号(上昇終了の判定に使用)
・$3D0FC-3D10B (10) = ステージ番号 : 上昇後のマップが描かれた部屋番号

(*)Area numberの指定
bit7-5 -> スクロール方向(001 -> 右, 010 -> 下, 100 -> 上)
bit4-0 -> スクロール番号

エレベーター上昇中は部屋番号が変わっていないことになるので、その間にオブジェクトを設置しても出現しないことに注意。
他ステージへのエレベータ設置例

-----------------------------------------------------------------------

スターマンステージの仕掛け


◇低重力
スターマンステージでは、Y方向移動ルーチンにおいてY方向速度への重力値の加算を3フレームに1度しか行わないことで低重力を実現している。
(ただし、重力反転時にはこれは適用されず毎フレーム重力が加算される)

・$376F8 低重力にするステージ番号
ブルースステージ1or4,ワイリーステージ3or4を低重力とするならついでに
376F6 : 27 -> 26
と変えた方が良いかも。


・$37741 重力値を加算するまでのフレーム数((*)ワイリーステージ2の水中処理も共有)


(*)ワイリーステージ2の水中処理
低重力処理と同じ。

・$37706 水中属性チップを使用するステージ番号

--------------------------------------------------------------------------

チャージマンステージの仕掛け


◇Bump(ガタンゴトンの効果音・Y方向への画面揺れ)処理

・$37779 Bump処理を行うステージ番号
・$3777F Bump処理を行わない部屋番号(ここで指定した部屋ではBump処理無効)
・$37783 Bump処理を行わない部屋番号(ここで指定した値未満の部屋ではBump処理無効)


◇画面左端8ピクセルに描画を行わない部屋番号
・$3CB50 ステージ番号
・$3CB56 部屋番号(1個目)
・$3CB5A 部屋番号(2個目)

部屋番号にはラスタースクロールを行っているエリア(EnemyID:4Dのオブジェクトを設置)の終端部屋番号+1を指定する。
適切な値を指定しないと下のように画面左端8ピクセルに描画された次の部屋のチップの一部が表示されてしまうので注意。



◇電車内に入る処理
EnemyID:40のオブジェクトを設置すればよい。オブジェクトと接触することで処理が始まる。
処理の流れとしては、

画面フェードアウト→普通に下スクロール→BG用パレット・CHR-BANKの変更→画面フェードイン・ロックマンのX座標調整

のようになっている。

・$36F0B-36F1A (10) 電車内のBG用パレット
・$36622 電車内のBG用CHR-BANK (BGバンク1)
・$36639 電車内に入った直後のロックマンのX座標(low)

----------------------------------------------------------------------------

クリスタルマンステージの仕掛け


◇落下するクリスタル

・3A82F 落下開始Y座標
・3A83E-3A841 落下開始までのフレーム数(ここからランダムに選択される)

落下開始時のY座標は固定されている。
オブジェクト設置時のY座標を落下開始位置とするようなコードを以下に例示する。

3A7CE-3A83D (70)
BD 68 04 F0 05 DE 68 04 D0 65 20 1E EA 20 25 A8
A9 D9 9D 88 05 BD 78 03 9D 80 04 20 68 E9 20 F8
EF B0 23 BD 38 04 48 BD 80 04 48 A9 00 85 00 20
9D 80 68 9D 80 04 68 9D 38 04 BD 00 03 D0 07 A9
26 9D 00 03 D0 07 BD 78 03 C9 E8 90 22 BD 80 04
9D 78 03 A5 E6 65 E5 85 E6 29 03 A8 B9 2E A8 9D
68 04 A9 00 9D A0 05 BD 28 05 49 04 9D 28 05 60

------------------------------------------------------------------------

ブルースステージ1の仕掛け


◇ブーンブロック
・$3BB04-3BB05 (2) $3BB06を基点としたブーンブロック出現データへの1byte相対アドレス

・$3BB06-3BB4A ブーンブロック出現データ
3bytesで1組のデータ。1組で1個のブロックの出現データを表す。
byte0 -> X座標
byte1 -> Y座標
byte2 -> 同時に出すブロックがあるか
  00 -> 同時に出すブロックはもう無い
  01 -> 同時に出すブロックがまだある
  FF -> データ終端(出現データの先頭に戻る)

例えば、以下のデータだと、
38 98 01 98 B8 00 38 68 01 78 A8 00 48 A8 FF

+→(38, 98), (98, B8)にブロック出現 (38 98 01 98 B8 00)
|    ↓
|  (38, 68), (78, A8)にブロック出現 (38 68 01 78 A8 00)
|    ↓
|  (48, A8)にブロック出現 (48 A8 FF)
|     |
+-----+
のようになる。

ブーンブロック(EnemyID:58)は、設置部屋番号を元に参照するデータが決まる。
$3BBF3 + 設置部屋番号 で上記のブロック出現データへの相対アドレスを取得するため、そのままでは部屋番号#$11以降に設置しなければ正常に動作しない。
ここでは、設置部屋番号ではなく設置Y座標によってブロック出現データへの相対アドレスを取得するような変更を例示する。

$3BAA2 : 48 -> 78 (設置部屋番号ではなく設置Y座標を参照するようになる)
$3BAA5 : E3 -> F4 (設置Y座標=00で$3BB04, 01で$3BB05,...を参照するようになる)

--------------------------------------------------------------------------

ブルースステージ3の仕掛け


◇進むブロック
・$A78D-A7DE ブロック出現データ
2bytesで1組のデータ。1組で進行方向のブロック出現データを表す。
byte0 -> ブロックを出す数
byte1 -> 進行方向(01->右、02->左、04->下、08->上、00->データ終端)

例えば、以下のデータだと、
02 08 09 01 02 08 06 01 01 08 05 01 03 08 02 01 02 04 00 00

　　　　　　　　　　　　　　　　　　　　→→↓
　　　　　　　　　　　　　　　　　　　　↑　↓
　　　　　　　　　　　　　　　　　　　　↑
　　　　　　　　　　　　　　　→→→→→↑
　　　　　　　　　→→→→→→↑
　　　　　　　　　↑
→→→→→→→→→↑
↑
↑

のようになる。
なお本編では、$A78D～A7B2までが1つ目の定義、$A7B3($A78D + $26)～A7DEまでが2つ目の定義となっている。
2つ目の定義のアドレスを変更する場合は、下記の「2つ目の定義の開始オフセット」を参照すること。

・$A57C、$A63E 1つ目の定義を使用する部屋番号(変更する場合、2箇所両方とも変えること)
ここで設定した以外の部屋番号にオブジェクトを設置した場合、2つ目の定義が参照される。

・$A580、$A642 2つ目の定義の開始オフセット(変更する場合、2箇所両方とも変えること)
$A78D + ここで設定した値 が2つ目の定義の開始アドレスとなる。

-----------------------------------------------------------------------

ボスの動作パラメータなど

◇グラビティーマン
・グラビティーマンの移動データ(12回で1セット)
$E255-E260 進行方向(01 -> 右, 02 -> 左, 04 -> 下, 08 -> 上)
$E261-E26C アニメーション番号(01 -> ジャンプ, 02 -> 歩行, 04 -> 重力反転)(実際にこの番号に従って行動する)
$E26D-E278 X方向速度(low)
$E279-E284 X方向速度(high)
$E285-E290 移動後のX座標(上の速度と対応)
(登場位置から重力反転)→D0→(歩行)→80→(重力反転)→80→・・・→D0

$E297-E299 弾を撃つアニメーションになるまでのフレーム数
$E1EE 弾を撃つアニメーションになってから実際に弾を撃つまでのフレーム数
　弾が1発で物足りない場合は、
　E1ED : C9 -> 29
　E1EE : 08 -> 01, 03, 07, 0F 等にしてみると良いかも

$E226 グラビティーマンの弾の速度(サブルーチン$F470の引数)



◇ウェーブマン
・噴水の出現X座標
$E595-E59C 相対X座標(low)
$E59D-E5A4 相対X座標(high)
ロックマンのX座標からの相対座標。8個のデータの中からランダムに選択される。

・モリの速度
$E531 X方向速度(low)
$E556 X方向速度(high)



◇ストーンマン
・遠距離からの次の動作(小ジャンプorパワーストーン生成)の選択確率
$C04E 小ジャンプの確率(00で必ず小ジャンプ, 01で1/2, 03で1/4, 07で1/8, 0Fで1/16くらい)
$C04F F0 -> D0で確率反転

・中距離からの次の動作(小ジャンプorパワーストーン生成or大ジャンプ)の選択確率
$C040 小ジャンプの確率(00で必ず小ジャンプ, 01で1/2, …)
($C041 F0 -> D0で小ジャンプをしない確率になる)
$C046 小ジャンプをしなかった時、パワーストーンを生成する確率(00で必ずパワーストーン, 01で1/2, …。パワーストーン生成を行わなければ大ジャンプ)
($C047 F0 -> D0, $C049 D0 -> F0でパワーストーンを生成しない確率になる)

・近距離からの次の動作(小ジャンプor大ジャンプ)の選択確率
$C038 小ジャンプ確率([この値]/8 くらいの確率で小ジャンプ)

・遠・中・近距離の基準となる値
$C02C ロックマンとストーンマンとの距離がこの値以上ならば遠距離
$C030 ロックマンとストーンマンとの距離がこの値以上ならば中距離
それ以外ならば近距離

$C15D 崩れた状態から元に戻った後、次の動作までのフレーム数

$C1FD パワーストーンの速度(サブルーチン$F470の引数)



◇ジャイロマン
・地面にいる時の次の動作(飛び上がるorプロペラ発射)の選択確率
$C47B プロペラ発射確率(00で必ず発射, 01で1/2, 03で1/4, 07で1/8, 0Fで1/16くらい)
$C47C D0 -> F0で確率反転

・ジャイロマンの飛び上がる速さ
$C511 Y方向速度(low)
$C516 Y方向速度(high)

$C4F3 アニメーション番号#$15(背中のプロペラ回る)に変化後、飛び上がるまでのフレーム数
$C596 着地後、次の行動に移るまでのフレーム数

・プロペラの停止フレーム数
　$C61F →・[停止]・↑
　$C63C ↓・[停止]・→

・プロペラの速さ
　$C4C8 →・[停止]・↑
　$C553 ↓・[停止]・→



◇スターマン
$10218 離れているor離れていないの基準となる値(スターマンの行動に関係。離れていれば遠距離ジャンプ, そうでなければ近距離ジャンプ)

$10253 近距離ジャンプ時にバリアを発射しない確率(00で発射しない, 01で1/2, 03で1/4, 07で1/8, 0Fで1/16くらい)
$10254 D0 -> F0で確率反転

$102D8 近距離ジャンプ後にバリアを発射しない確率(00で発射しない, 01で1/2, …)
$102D9 F0 -> D0で確率反転

$103A9 バリアの発射速度(サブルーチン$F470の引数)



◇チャージマン
$C212 離れているor離れていないの基準となる値(石炭を落とした後の行動に関係、離れていればダッシュ, そうでなければ歩行)

・チャージマンのダッシュ時の速度
$C25E X方向速度(low)
$C263 X方向速度(high)
$C272 ダッシュするフレーム数に関係([ロックマンとチャージマンのX方向距離] / [この値] フレームだけダッシュする。)

・チャージマンの歩行速度
$C2EE X方向速度(low)
$C2F3 X方向速度(high)

・歩行時の方向転換判定の間隔
$C2FD 方向転換判定を行うまでのフレーム数
$C31B 方向転換判定を行うまでのフレーム数

・歩行状態から次の行動(ダッシュor石炭を落とす)の選択確率
$C334 ダッシュする確率(00で必ずダッシュ, 01で1/2, 03で1/4, 07で1/8, 0Fで1/16くらい)
$C335 D0 -> F0で確率反転
$C2F8 歩行から次の行動(ダッシュor石炭を落とす)に移るまでのフレーム数

$C409 石炭を落とす数(実際の個数より1小さい値を指定, 03以上を指定すると石炭のX座標テーブルをはみだすので一応注意)
$C44D-C464 石炭のX座標テーブル(3bytesで1組のデータ。8通りのデータが定義されており, この中からランダムに選択される)



◇ナパームマン
$10014 離れているor離れていないの基準となる値(ナパームマンの行動に関係。離れていればミサイル, そうでなければナパームボム)

$10039 ミサイルの発射回数
$1005F ミサイル発射後のジャンプの高さ(00～03で指定, 01＞03＞00＞02の順で高い)
$1005B 4A -> EAでミサイル発射後にロックマンの位置までジャンプ
$10083 ミサイル発射後、ジャンプ動作に移るまでのフレーム数

$10118 ナパームボムの個数(実際の個数より1小さい値を指定, 02以上を指定すると出現位置が多少おかしいものも出てくるので一応注意)
$10157 ナパームボムの投げ上げ速度(00or01で指定, 01＞00の順で高い)
$10190 ナパームボム発射後のジャンプの高さ(00～03で指定, 01＞03＞00＞02の順で高い)

・ミサイルの速度
$100B0 X方向速度(low)
$100B5 X方向速度(high)



◇クリスタルマン
・クリスタルマンの速度(それぞれロックマンとのX方向の距離が一定以上離れているor離れていないの順にデータが入っている)
$E43C-E43D Y方向速度(low)
$E43E-E43F Y方向速度(high)
$E440-E441 X方向速度(low)
$E442-E443 X方向速度(high)
$E2AE 離れているor離れていないの基準となる値

$E401 クリスタルマンの反射する弾の速度(サブルーチン$F470の引数)
$E431 クリスタルマンの通常弾の速度(サブルーチン$F470の引数)

・反射する弾生成
$E3DF 1個目の弾の方向
$E40E 前の弾の方向から見た次の弾の方向
$E409 最後の弾の方向
方向は、00～0F(時計回りで 00 -> 真上 01 -> 北北東 02 -> 北東, ... 0F -> 北北西)。
$E3DFの値に$E40Eの値を繰り返し加算すると$E409の値となるように$E409の値を定めなければならない。
例えば($E3DF, $E40E, $E409) = (00, 02, 0E)で8way、(04, 02, 0C)で5wayとなる。



◇ダークマン1号
・こちらの攻撃に関係なく撃ってくる弾
$12300、$123FB 弾を撃つまでのフレーム数(両方とも同じ値を入れること)
$123BE X方向速度(low)
$123C3 X方向速度(high)

・ダメージを受けた時に撃ち返してくる弾
$123D1 弾の速度(サブルーチン$F470の引数)

・ダークマン1号の速度アップ関係
$12339 ダークマン1号が速度アップする残りHPその1(このHP未満になると以下で指定した速度になる)
$12348 速度アップ(その1)後のX方向速度(high) ※lowの指定はない
$1233D ダークマン1号が速度アップする残りHPその2(このHP未満になると以下で指定した速度になる)
$12341 速度アップ(その2)後のX方向速度(high) ※lowの指定はない
       ただし00を指定すると、速度アップ(その1)の値が使われる

$12364 ロックマンとの向きが変わった時、方向転換して動き出すまでのフレーム数


--------------------------------------------------------------

ザコ敵等の動作パラメータなど

◇プカプッカー(EnemyID:00 | 本体 -> ObjectID:10, 頭 -> ObjectID:11)
・$38A83 プカプッカーの頭のHP
・$38A9E プカプッカーの頭のY方向速度(low) (体破壊前)
・$38AA3 プカプッカーの頭のY方向速度(high) (体破壊前)
・$38AA8 プカプッカーの頭のX方向速度(low) (体破壊後)
・$38AAD プカプッカーの頭のX方向速度(high) (体破壊後)
・$38B5A プカプッカーの頭のX方向速度(low) (体破壊後)
・$38B5F プカプッカーの頭のX方向速度(high) (体破壊後)

・$38ACE プカプッカーが方向転換するまでのフレーム数(初期値)
・$38AE8 プカプッカーが方向転換するまでのフレーム数(方向転換する度にセットされる値)

プカプッカー本体のX方向速度は設置オブジェクト初期値で設定する。


◇コーカーＱ(EnemyID:01 | ObjectID:12)
コーカーＱから見たロックマンのいる方角(こちらを参照)が下の値となった時、落下状態に移る。
・$39032 1個目
・$39036 2個目

コーカーＱのX方向速度は設置オブジェクト初期値で設定する。


◇ボンビャー(EnemyID:02 | 本体 -> ObjectID:13, 爆弾 -> ObjectID:14)
・$38DFC ロックマンとのX方向距離がこの値未満になったときに爆弾を生成
・$38E44 ボンビャーの爆弾のHP

ボンビャーのX方向速度は設置オブジェクト初期値で設定する。


◇スペースメットール(EnemyID:03 | ObjectID:15)
・$3916A 近距離時の速度(サブルーチン$F470の引数)

遠距離時の速度
・$3919E X,Y方向速度(low)
・$391A6 X,Y方向速度(high) 

近距離・遠距離を決定する値(ロックマンとのX,Y方向距離が共にこの値未満のとき近距離)
・$39147 X方向距離
・$3914E Y方向距離


◇スマトラン(EnemyID:04 | ObjectID:16)
・$396F8 スマトランが反応するパッド入力
    bit7 A
    bit6 B
    bit5 セレクト
    bit4 スタート 
    bit3 上
    bit2 下
    bit1 左
    bit0 右

スマトランがロックマンに飛び掛るまでの距離(ロックマンとのX,Y方向距離が共にこの値未満のとき飛び掛る)
・$396FF X方向距離
・$39706 Y方向距離

速度
・$3976E Y方向速度(low)
・$39773 Y方向速度(high)
スマトランのX方向速度は設置オブジェクト初期値で設定する。


◇マウスベール(EnemyID:05 | ObjectID:17)
・$38F8F 地面端到着後・方向転換するまでのフレーム数

マウスベールのX方向速度は設置オブジェクト初期値で設定する。


◇新シールドアタッカー(EnemyID:06 | ObjectID:18)
ブロックにぶつかる又は自身の36ドット下のチップ属性が偶数であるとき方向転換する。

新シールドアタッカーのX方向速度は設置オブジェクト初期値で設定する。


◇レンバクン(EnemyID:07 | 本体 -> ObjectID:19, 爆弾 -> ObjectID:1A)
コーカーＱから見たロックマンのいる方角(こちらを参照)が下の値となった時、落下状態に移る。
・$38FB7 1個目
・$38FBB 2個目

レンバクンのX方向速度は設置オブジェクト初期値で設定する。


◇メットール砲台(EnemyID:08 | 本体 -> ObjectID:1B, 弾 -> ObjectID:1C)


◇メットールＫ－１０００(EnemyID:09 | ObjectID:1D, 弾 -> ObjectID:55)


◇落下するクリスタル(EnemyID:0A | ObjectID:26)
クリスタルマンステージの仕掛けを参照。


◇V（ブイ）(EnemyID:0B | ObjectID:1F)
動作無し(rtsのみ)

◇パワーマッスラー(EnemyID:0C | ObjectID:20)

◇アパッチジョー(EnemyID:0D | 本体 -> ObjectID:21, 弾 -> ObjectID:55)

◇鉄キューン(逆さ -> EnemyID:0E, 普通 -> EnemyID:0F | ObjectID:23)


◇ミザイル(EnemyID:10 | 生成機 -> ObjectID:24, 本体 -> ObjectID:25)
・$3989B ロックマンとのX方向距離がこの値未満になったときにミザイル出現
・$397A9 ミザイルのHP
・$397B8 ミザイルが飛び出す時のY方向速度(low)
・$397BD ミザイルが飛び出す時のY方向速度(high)
・$397C2 ミザイルが停止するまでのフレーム数(あまり大きな値を指定するとそのまま画面外まで飛んでいくので注意)
・$397F4 ミザイルが戻っていく時のY方向速度(high)(lowは飛び出す時の値と同じ)


◇スターマンステージの隕石(EnemyID:11 | 生成機 -> ObjectID:38, 本体 -> ObjectID:39)

◇グラビットン(EnemyID:12 | 本体 -> ObjectID:28, 弾 -> ObjectID:29)

◇ウェーブマンステージの噴き出す水(EnemyID:13 | ObjectID:27)

◇タテパッカン(EnemyID:14 | 本体 -> ObjectID:2B, 弾 -> ObjectID:2C)

◇フージーン(EnemyID:15 | 本体 -> ObjectID:31, 弾 -> ObjectID:32)

◇ボンバースローン(EnemyID:16 | 本体 -> ObjectID:33, 弾 -> ObjectID:34)


◇ライダージョー(画面右から登場)(EnemyID:17 | ObjectID:35)
X方向速度は設置オブジェクト初期値で設定する。

◇ライダージョー(画面左から登場・弾を撃つ)(EnemyID:28 | 本体 -> ObjectID:35, 弾 -> ObjectID:37)
・$39DAA 最初の弾を撃つまでのフレーム数
・$39DB4 弾を撃つまでのフレーム数
・$39DD6 弾のX方向速度(low)
・$39DDB 弾のX方向速度(high)

ライダージョー本体のX方向速度は設置オブジェクト初期値で設定する。



◇リリック(EnemyID:61 | ObjectID:68)
・$3AB44 リリックの速度(サブルーチン$F470の引数)

